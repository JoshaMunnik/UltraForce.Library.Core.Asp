{
  "api/UltraForce.Library.Core.Asp.Annotations.UFAuthorizeRolesAttribute.html": {
    "href": "api/UltraForce.Library.Core.Asp.Annotations.UFAuthorizeRolesAttribute.html",
    "title": "Class UFAuthorizeRolesAttribute | UltraForce.Library.Core.Asp",
    "keywords": "Class UFAuthorizeRolesAttribute Namespace UltraForce.Library.Core.Asp.Annotations Assembly UltraForce.Library.Core.Asp.dll UFAuthorizeRolesAttribute can be used to specify a list of roles in a better manner. Code based on: https://stackoverflow.com/a/24182340/968451 public class UFAuthorizeRolesAttribute : AuthorizeAttribute, IAuthorizeData Inheritance object Attribute AuthorizeAttribute UFAuthorizeRolesAttribute Implements IAuthorizeData Inherited Members AuthorizeAttribute.ToString() AuthorizeAttribute.Policy AuthorizeAttribute.Roles AuthorizeAttribute.AuthenticationSchemes Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors UFAuthorizeRolesAttribute(params string[]) Combines the roles into a single string using ',' as a separator. public UFAuthorizeRolesAttribute(params string[] aRoles) Parameters aRoles string[] Roles to combine"
  },
  "api/UltraForce.Library.Core.Asp.Annotations.html": {
    "href": "api/UltraForce.Library.Core.Asp.Annotations.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Annotations | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Annotations Classes UFAuthorizeRolesAttribute UFAuthorizeRolesAttribute can be used to specify a list of roles in a better manner. Code based on: https://stackoverflow.com/a/24182340/968451"
  },
  "api/UltraForce.Library.Core.Asp.Controllers.UFController.html": {
    "href": "api/UltraForce.Library.Core.Asp.Controllers.UFController.html",
    "title": "Class UFController | UltraForce.Library.Core.Asp",
    "keywords": "Class UFController Namespace UltraForce.Library.Core.Asp.Controllers Assembly UltraForce.Library.Core.Asp.dll This class extends Controller and adds some additional methods. public class UFController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller UFController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BadRequest<TEnum>(TEnum) Generate a bad request using UltraForce.Library.NetStandard.Net.UFExtendedErrorResponseModel<TEnum>. protected IActionResult BadRequest<TEnum>(TEnum aCode) where TEnum : struct, IConvertible Parameters aCode TEnum Extended error code Returns IActionResult Bad request with json object with the following format: { code /* int */, name /* string */ } Type Parameters TEnum Enumeration type that defines extended error codes Json(ILogger, object) Writes the json response first to the logger before sending it back to the server. protected JsonResult Json(ILogger aLogger, object aData) Parameters aLogger ILogger Logger to write to aData object Data to create Json for Returns JsonResult JsonResult instance"
  },
  "api/UltraForce.Library.Core.Asp.Controllers.html": {
    "href": "api/UltraForce.Library.Core.Asp.Controllers.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Controllers | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Controllers Classes UFController This class extends Controller and adds some additional methods."
  },
  "api/UltraForce.Library.Core.Asp.Localization.UFDutchDefaultModelBindingMessageProvider.html": {
    "href": "api/UltraForce.Library.Core.Asp.Localization.UFDutchDefaultModelBindingMessageProvider.html",
    "title": "Class UFDutchDefaultModelBindingMessageProvider | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDutchDefaultModelBindingMessageProvider Namespace UltraForce.Library.Core.Asp.Localization Assembly UltraForce.Library.Core.Asp.dll This class replaced error message in DefaultModelBindingMessageProvider with Dutch variants. public static class UFDutchDefaultModelBindingMessageProvider Inheritance object UFDutchDefaultModelBindingMessageProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Apply(DefaultModelBindingMessageProvider) Replaces the error messages with Dutch versions. public static void Apply(DefaultModelBindingMessageProvider aProvider) Parameters aProvider DefaultModelBindingMessageProvider Provider to update"
  },
  "api/UltraForce.Library.Core.Asp.Localization.html": {
    "href": "api/UltraForce.Library.Core.Asp.Localization.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Localization | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Localization Classes UFDutchDefaultModelBindingMessageProvider This class replaced error message in DefaultModelBindingMessageProvider with Dutch variants."
  },
  "api/UltraForce.Library.Core.Asp.Models.UFEmailContentModel.html": {
    "href": "api/UltraForce.Library.Core.Asp.Models.UFEmailContentModel.html",
    "title": "Class UFEmailContentModel | UltraForce.Library.Core.Asp",
    "keywords": "Class UFEmailContentModel Namespace UltraForce.Library.Core.Asp.Models Assembly UltraForce.Library.Core.Asp.dll This models is a simple class containing content for an email both in html and plain text form. public class UFEmailContentModel Inheritance object UFEmailContentModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFEmailContentModel(string?, string?) Create structure public UFEmailContentModel(string? anHtml = null, string? aText = null) Parameters anHtml string initial html text aText string initial plain text Properties Html Content in html form or null if no content exists public string? Html { get; set; } Property Value string IsEmpty This property is true if both Html and Text public bool IsEmpty { get; } Property Value bool Text Content in plain text form or null if no content exists. public string? Text { get; set; } Property Value string"
  },
  "api/UltraForce.Library.Core.Asp.Models.html": {
    "href": "api/UltraForce.Library.Core.Asp.Models.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Models | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Models Classes UFEmailContentModel This models is a simple class containing content for an email both in html and plain text form."
  },
  "api/UltraForce.Library.Core.Asp.Services.IUFAsynchronousExecutableService.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.IUFAsynchronousExecutableService.html",
    "title": "Interface IUFAsynchronousExecutableService | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFAsynchronousExecutableService Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll An interface defining a method that will be run asynchronously. It is based on the BackgroundService. public interface IUFAsynchronousExecutableService Methods ExecuteAsync(CancellationToken) Executes the service asynchronously. Task ExecuteAsync(CancellationToken aCancellationToken) Parameters aCancellationToken CancellationToken A token that should be checked and the execution should stop Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.Services.IUFModelExpressionRenderer.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.IUFModelExpressionRenderer.html",
    "title": "Interface IUFModelExpressionRenderer | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFModelExpressionRenderer Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll Defines a renderer for ModelExpressions. public interface IUFModelExpressionRenderer Methods GetName(ModelExpression, ViewContext) Gets the name for an model expression. IHtmlContentBuilder GetName(ModelExpression anExpression, ViewContext aViewContext) Parameters anExpression ModelExpression expression to get name for aViewContext ViewContext Returns IHtmlContentBuilder html representation of name SetContentToNameAsync(TagHelperOutput, ModelExpression, ViewContext) Sets the content to the (display) name of the ModelExpression. The code is based on the code from LabelTagHelper. Task SetContentToNameAsync(TagHelperOutput anOutput, ModelExpression anExpression, ViewContext aViewContext) Parameters anOutput TagHelperOutput Output to update anExpression ModelExpression Model expression to get name from aViewContext ViewContext View context to use Returns Task SetContentToValueAsync(TagHelperOutput, ModelExpression, ViewContext) Sets the content to the value of the ModelExpression. Task SetContentToValueAsync(TagHelperOutput anOutput, ModelExpression anExpression, ViewContext aViewContext) Parameters anOutput TagHelperOutput Output to update anExpression ModelExpression Expression to get value from aViewContext ViewContext View context to use Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.Services.IUFTheme.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.IUFTheme.html",
    "title": "Interface IUFTheme | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFTheme Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll IUFTheme generates css classes and html for the different components. public interface IUFTheme Methods GetButtonCaptionClasses(IUFButtonProperties) Gets the css classes to use for the caption element within a button. string GetButtonCaptionClasses(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties The button property values Returns string One or more css classes to style the caption. GetButtonClasses(IUFButtonProperties) Gets the css classes to use for the button element. string GetButtonClasses(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties The button property values Returns string One or more css classes to style the button. GetButtonIconHtml(IUFButtonProperties) Gets the html for an icon. string GetButtonIconHtml(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties Returns string Html snippet or empty string if there is no icon GetCheckboxExtraHtml() Gets the extra html to render after the checkbox input element. It can be used when using custom graphics. string GetCheckboxExtraHtml() Returns string GetCheckboxInputClasses() Returns the css classes to use for the checkbox input element. string GetCheckboxInputClasses() Returns string GetCheckboxLabelClasses() Returns the css classes to use for the label of a checkbox element. string GetCheckboxLabelClasses() Returns string GetCheckboxLabelDescriptionClasses() Returns the css classes to use for the description within the checkbox label element. string GetCheckboxLabelDescriptionClasses() Returns string GetCheckboxLabelSpanClasses() Returns the css classes to use for the text within the checkbox label element. string GetCheckboxLabelSpanClasses() Returns string GetCheckboxWrapperClasses() Returns the css classes to use for the wrapper of a checkbox element. string GetCheckboxWrapperClasses() Returns string GetColumnClasses(IUFFlexProperties) Returns the css classes to use for the column element. string GetColumnClasses(IUFFlexProperties aProperties) Parameters aProperties IUFFlexProperties Returns string GetContainerClasses(IUFContainerProperties) Gets the css classes to use for the container element. string GetContainerClasses(IUFContainerProperties aProperties) Parameters aProperties IUFContainerProperties The container property values Returns string One or more css classes to style the container. GetDataListClasses() Gets the css classes to use for the data list element. string GetDataListClasses() Returns string One or more css classes to style the data list. GetDataNameClasses() Gets the css classes to use for the data name element. string GetDataNameClasses() Returns string One or more css classes to style the data name. GetDataValueClasses() Gets the css classes to use for the data value element. string GetDataValueClasses() Returns string One or more css classes to style the data value. GetFieldErrorsClasses() Returns the css classes to use for the wrapper of the errors. string GetFieldErrorsClasses() Returns string GetFieldErrorsHtml(ModelStateDictionary, string) Gets the errors for an input field as an html block. The errors will be wrapped in a container, see GetFieldErrorsClasses(). string GetFieldErrorsHtml(ModelStateDictionary aModelState, string aName) Parameters aModelState ModelStateDictionary aName string Returns string GetFilterButtonClasses() Returns the css classes to use for button element within the filter container. string GetFilterButtonClasses() Returns string GetFilterContainerClasses() Returns the css classes to use for the filter container element shown above the table if Filter is true. string GetFilterContainerClasses() Returns string GetFilterInputClasses() Returns the css classes to use for input element within the filter container. string GetFilterInputClasses() Returns string GetFilterLabelClasses() Returns the css classes to use for the label element within the filter container. string GetFilterLabelClasses() Returns string GetRadioExtraHtml() Gets the extra html to render after the radio input element. It can be used when using custom graphics. string GetRadioExtraHtml() Returns string GetRadioInputClasses() Returns the css classes to use for the radio input element. string GetRadioInputClasses() Returns string GetRadioLabelClasses() Returns the css classes to use for the label of a radio element. string GetRadioLabelClasses() Returns string GetRadioLabelDescriptionClasses() Returns the css classes to use for the description within the radio label element. string GetRadioLabelDescriptionClasses() Returns string GetRadioLabelSpanClasses() Returns the css classes to use for the text within the radio label element. string GetRadioLabelSpanClasses() Returns string GetRadioWrapperClasses() Returns the css classes to use for the wrapper element of a radio element. string GetRadioWrapperClasses() Returns string GetRowClasses(IUFFlexProperties) Returns the css classes to use for the row element. string GetRowClasses(IUFFlexProperties aProperties) Parameters aProperties IUFFlexProperties Returns string GetSelectClasses(IUFInputProperties) Returns the css classes to use for the select element. string GetSelectClasses(IUFInputProperties aProperties) Parameters aProperties IUFInputProperties Returns string GetSortAscendingClasses() Returns the css classes to use for a table header element when the rows are sorted in an ascending order for that column. The css classes are added to the result from GetTableRowClasses(IUFTableRowProperties, IUFTableProperties). string GetSortAscendingClasses() Returns string GetSortDescendingClasses() Returns the css classes to use for a table header element when the rows are sorted in an descending order for that column. The css classes are added to the result from GetTableRowClasses(IUFTableRowProperties, IUFTableProperties). string GetSortDescendingClasses() Returns string GetSpacerClasses(IUFSpacerProperties) Returns the css classes to use for the spacer element. string GetSpacerClasses(IUFSpacerProperties aProperties) Parameters aProperties IUFSpacerProperties Returns string GetTabContentWrapperClasses(IUFTabProperties) Gets the css classes to use for the content wrapper element with a tab. string GetTabContentWrapperClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTabLabelClasses(IUFTabProperties) Gets the css classes to use for the label element with a tab. string GetTabLabelClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTabRadioClasses(IUFTabProperties) Gets the css classes to use for the radio element with a tab. string GetTabRadioClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTableCellClasses(IUFCellProperties, UFTableCellType, IUFTableProperties, IUFTableRowProperties) Returns the css classes to use for the table cell (td/th) element. string GetTableCellClasses(IUFCellProperties aProperties, UFTableCellType aType, IUFTableProperties aTableProperties, IUFTableRowProperties aRowProperties) Parameters aProperties IUFCellProperties aType UFTableCellType aTableProperties IUFTableProperties aRowProperties IUFTableRowProperties Returns string GetTableClasses(IUFTableProperties) Returns the css classes to use for the table element. string GetTableClasses(IUFTableProperties aProperties) Parameters aProperties IUFTableProperties Returns string GetTableHeaderButtonClasses(IUFCellProperties, IUFTableProperties, IUFTableRowProperties) Returns the css classes to use for the button element within a table header cell that is added when the table is sortable. string GetTableHeaderButtonClasses(IUFCellProperties aProperties, IUFTableProperties aTableProperties, IUFTableRowProperties aRowProperties) Parameters aProperties IUFCellProperties aTableProperties IUFTableProperties aRowProperties IUFTableRowProperties Returns string GetTableRowClasses(IUFTableRowProperties, IUFTableProperties) Returns the css classes to use for the table row (tr) element. string GetTableRowClasses(IUFTableRowProperties aProperties, IUFTableProperties aTableProperties) Parameters aProperties IUFTableRowProperties aTableProperties IUFTableProperties Returns string GetTabsClasses(int) Gets the css classes to use for the tabs container element. string GetTabsClasses(int aCount) Parameters aCount int Number of tabs the container contains Returns string GetTextInputClasses(IUFInputProperties, string) Returns the css classes to use with the text input element. string GetTextInputClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelClasses(IUFInputProperties, string) Returns the css classes to use with the label for text input and select elements. string GetTextLabelClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelDescriptionClasses(IUFInputProperties, string) Returns the css classes to use with the description within label for text input and select elements. string GetTextLabelDescriptionClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelSpanClasses(IUFInputProperties, string) Returns the css classes to use with the span within the label for text input and select elements. string GetTextLabelSpanClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextWrapperClasses(IUFInputProperties, string) Returns the css classes to use with the wrapper element for text input and select elements. string GetTextWrapperClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetValidationFeedbackContainerHtml(string) Returns the html for the validation feedback container (used by javascript validation). string GetValidationFeedbackContainerHtml(string anId) Parameters anId string Returns string IsCssClass(string) Checks if a value is a css class or unit value (to be set within the style attribute). bool IsCssClass(string aValue) Parameters aValue string Returns bool"
  },
  "api/UltraForce.Library.Core.Asp.Services.UFDutchIdentityErrorDescriber.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFDutchIdentityErrorDescriber.html",
    "title": "Class UFDutchIdentityErrorDescriber | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDutchIdentityErrorDescriber Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll This class uses error messages in Dutch. public class UFDutchIdentityErrorDescriber : IdentityErrorDescriber Inheritance object IdentityErrorDescriber UFDutchIdentityErrorDescriber Inherited Members IdentityErrorDescriber.DefaultError() IdentityErrorDescriber.ConcurrencyFailure() IdentityErrorDescriber.InvalidToken() IdentityErrorDescriber.RecoveryCodeRedemptionFailed() IdentityErrorDescriber.LoginAlreadyAssociated() IdentityErrorDescriber.InvalidUserName(string) IdentityErrorDescriber.InvalidEmail(string) IdentityErrorDescriber.DuplicateUserName(string) IdentityErrorDescriber.InvalidRoleName(string) IdentityErrorDescriber.DuplicateRoleName(string) IdentityErrorDescriber.UserAlreadyHasPassword() IdentityErrorDescriber.UserLockoutNotEnabled() IdentityErrorDescriber.UserAlreadyInRole(string) IdentityErrorDescriber.UserNotInRole(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DuplicateEmail(string) Returns an IdentityError indicating the specified email is already associated with an account. public override IdentityError DuplicateEmail(string email) Parameters email string The email that is already associated with an account. Returns IdentityError An IdentityError indicating the specified email is already associated with an account. PasswordMismatch() Returns an IdentityError indicating a password mismatch. public override IdentityError PasswordMismatch() Returns IdentityError An IdentityError indicating a password mismatch. PasswordRequiresDigit() Returns an IdentityError indicating a password entered does not contain a numeric character, which is required by the password policy. public override IdentityError PasswordRequiresDigit() Returns IdentityError An IdentityError indicating a password entered does not contain a numeric character. PasswordRequiresLower() Returns an IdentityError indicating a password entered does not contain a lower case letter, which is required by the password policy. public override IdentityError PasswordRequiresLower() Returns IdentityError An IdentityError indicating a password entered does not contain a lower case letter. PasswordRequiresNonAlphanumeric() Returns an IdentityError indicating a password entered does not contain a non-alphanumeric character, which is required by the password policy. public override IdentityError PasswordRequiresNonAlphanumeric() Returns IdentityError An IdentityError indicating a password entered does not contain a non-alphanumeric character. PasswordRequiresUniqueChars(int) Returns an IdentityError indicating a password does not meet the minimum number uniqueChars of unique chars. public override IdentityError PasswordRequiresUniqueChars(int anUniqueChars) Parameters anUniqueChars int Returns IdentityError An IdentityError indicating a password does not meet the minimum number uniqueChars of unique chars. PasswordRequiresUpper() Returns an IdentityError indicating a password entered does not contain an upper case letter, which is required by the password policy. public override IdentityError PasswordRequiresUpper() Returns IdentityError An IdentityError indicating a password entered does not contain an upper case letter. PasswordTooShort(int) Returns an IdentityError indicating a password of the specified length does not meet the minimum length requirements. public override IdentityError PasswordTooShort(int aLength) Parameters aLength int Returns IdentityError An IdentityError indicating a password of the specified length does not meet the minimum length requirements."
  },
  "api/UltraForce.Library.Core.Asp.Services.UFFontAwesomeTheme.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFFontAwesomeTheme.html",
    "title": "Class UFFontAwesomeTheme | UltraForce.Library.Core.Asp",
    "keywords": "Class UFFontAwesomeTheme Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll UFFontAwesomeTheme implements icon related methods for use with font awesome. public class UFFontAwesomeTheme : UFTheme, IUFTheme Inheritance object UFTheme UFFontAwesomeTheme Implements IUFTheme Inherited Members UFTheme.GetButtonClasses(IUFButtonProperties) UFTheme.GetButtonCaptionClasses(IUFButtonProperties) UFTheme.GetContainerClasses(IUFContainerProperties) UFTheme.GetTabsClasses(int) UFTheme.GetTabRadioClasses(IUFTabProperties) UFTheme.GetTabLabelClasses(IUFTabProperties) UFTheme.GetTabContentWrapperClasses(IUFTabProperties) UFTheme.GetDataListClasses() UFTheme.GetDataNameClasses() UFTheme.GetDataValueClasses() UFTheme.GetTextWrapperClasses(IUFInputProperties, string) UFTheme.GetTextLabelClasses(IUFInputProperties, string) UFTheme.GetTextLabelSpanClasses(IUFInputProperties, string) UFTheme.GetTextLabelDescriptionClasses(IUFInputProperties, string) UFTheme.GetTextInputClasses(IUFInputProperties, string) UFTheme.GetValidationFeedbackContainerHtml(string) UFTheme.GetFieldErrorsHtml(ModelStateDictionary, string) UFTheme.GetFieldErrorsClasses() UFTheme.GetCheckboxWrapperClasses() UFTheme.GetCheckboxLabelClasses() UFTheme.GetCheckboxLabelSpanClasses() UFTheme.GetCheckboxLabelDescriptionClasses() UFTheme.GetCheckboxInputClasses() UFTheme.GetCheckboxExtraHtml() UFTheme.GetRadioWrapperClasses() UFTheme.GetRadioLabelClasses() UFTheme.GetRadioLabelSpanClasses() UFTheme.GetRadioLabelDescriptionClasses() UFTheme.GetRadioInputClasses() UFTheme.GetRadioExtraHtml() UFTheme.GetSelectClasses(IUFInputProperties) UFTheme.GetSpacerClasses(IUFSpacerProperties) UFTheme.GetColumnClasses(IUFFlexProperties) UFTheme.GetRowClasses(IUFFlexProperties) UFTheme.GetTableClasses(IUFTableProperties) UFTheme.GetTableCellClasses(IUFCellProperties, UFTableCellType, IUFTableProperties, IUFTableRowProperties) UFTheme.GetTableHeaderButtonClasses(IUFCellProperties, IUFTableProperties, IUFTableRowProperties) UFTheme.GetTableRowClasses(IUFTableRowProperties, IUFTableProperties) UFTheme.GetFilterContainerClasses() UFTheme.GetFilterLabelClasses() UFTheme.GetFilterInputClasses() UFTheme.GetFilterButtonClasses() UFTheme.GetSortAscendingClasses() UFTheme.GetSortDescendingClasses() UFTheme.IsCssClass(string) UFTheme.GetValidationFeedbackClasses() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetButtonIconHtml(IUFButtonProperties) Gets the html for an icon. public override string GetButtonIconHtml(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties Returns string Html snippet or empty string if there is no icon GetIconCssClasses(IUFButtonProperties) Gets the css classes for an icon. The default implementation assumes font awesome v6+ is used and returns a solid icon by adding \"fa-\" to the icon name and using the \"fas\" class: fas fa-{Icon} protected virtual string GetIconCssClasses(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties Returns string Css classes or empty string if there is no icon"
  },
  "api/UltraForce.Library.Core.Asp.Services.UFModelExpressionRenderer.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFModelExpressionRenderer.html",
    "title": "Class UFModelExpressionRenderer | UltraForce.Library.Core.Asp",
    "keywords": "Class UFModelExpressionRenderer Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll An implementation of IUFModelExpressionRenderer. public class UFModelExpressionRenderer : IUFModelExpressionRenderer Inheritance object UFModelExpressionRenderer Implements IUFModelExpressionRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFModelExpressionRenderer(IHtmlGenerator) Constructs an instance of the UFModelExpressionRenderer. public UFModelExpressionRenderer(IHtmlGenerator aGenerator) Parameters aGenerator IHtmlGenerator Properties HtmlGenerator Html generator instance protected IHtmlGenerator HtmlGenerator { get; } Property Value IHtmlGenerator Methods GetCheckBoxHtml(bool) Generates a input tag using checkbox type. The default method just creates a basic input type without any styling. Subclasses can override if needed. protected virtual string GetCheckBoxHtml(bool aChecked) Parameters aChecked bool Returns string GetDateHtml(DateOnly?) Generates a html representation of a date. The default implementation returns the date in mysql format (yyyy-MM-dd) or '-' if the date is null. protected virtual string GetDateHtml(DateOnly? aDate) Parameters aDate DateOnly? Date or null if render no date Returns string GetDateTimeHtml(DateTime?) Generates a html representation of a date and time. The default implementation returns the date/time in mysql format (yyyy-MM-dd HH:mm:ss) or '-' if the date is null. protected virtual string GetDateTimeHtml(DateTime? aDateTime) Parameters aDateTime DateTime? Date/time or null if render no date and time Returns string GetEmailLinkHtml(string) Generates an anchor tag using a mailto protocol. The default method just creates a basic input type without any styling. Subclasses can override if needed. protected virtual string GetEmailLinkHtml(string anEmail) Parameters anEmail string Returns string GetName(ModelExpression, ViewContext) Gets the name for an model expression. public IHtmlContentBuilder GetName(ModelExpression anExpression, ViewContext aViewContext) Parameters anExpression ModelExpression expression to get name for aViewContext ViewContext Returns IHtmlContentBuilder html representation of name GetTimeHtml(TimeOnly?) Generates a html representation of a time. The default implementation returns the time in mysql format (HH:mm:ss) or '-' if the time is null. protected virtual string GetTimeHtml(TimeOnly? aDate) Parameters aDate TimeOnly? Time or null if render no time Returns string SetContentToNameAsync(TagHelperOutput, ModelExpression, ViewContext) Sets the content to the (display) name of the ModelExpression. The code is based on the code from LabelTagHelper. public Task SetContentToNameAsync(TagHelperOutput anOutput, ModelExpression anExpression, ViewContext aViewContext) Parameters anOutput TagHelperOutput Output to update anExpression ModelExpression Model expression to get name from aViewContext ViewContext View context to use Returns Task SetContentToValueAsync(TagHelperOutput, ModelExpression, ViewContext) Sets the content to the value of the ModelExpression. It handles date and bool types. Date types are formatted to \"yyyy-MM-dd HH:mm:ss\". Bool types are shown as a checked or unchecked checkbox. If the model expression uses the EmailAddressAttribute the value gets rendered using a mailto: link. public Task SetContentToValueAsync(TagHelperOutput anOutput, ModelExpression anExpression, ViewContext aViewContext) Parameters anOutput TagHelperOutput anExpression ModelExpression aViewContext ViewContext Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.Services.UFRazorViewRenderer.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFRazorViewRenderer.html",
    "title": "Class UFRazorViewRenderer | UltraForce.Library.Core.Asp",
    "keywords": "Class UFRazorViewRenderer Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll A service to help renders a razor view to a string. Register this class as a Transient service with the service collection. public class UFRazorViewRenderer Inheritance object UFRazorViewRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Based on code from: https://github.com/aspnet/Entropy/blob/master/samples/Mvc.RenderViewToString/RazorViewToStringRenderer.cs Constructors UFRazorViewRenderer(IRazorViewEngine, ITempDataProvider, IServiceProvider) Constructs an instance of UFRazorViewRenderer public UFRazorViewRenderer(IRazorViewEngine aViewEngine, ITempDataProvider aTempDataProvider, IServiceProvider aServiceProvider) Parameters aViewEngine IRazorViewEngine aTempDataProvider ITempDataProvider aServiceProvider IServiceProvider Methods RenderEmailViewAsync<TModel>(string, TModel) Tries to render both an html and plain text version of an email by appending 'Html'/'.Html' and 'Text'/'.Text' to the base view name. aBaseViewName. public Task<UFEmailContentModel> RenderEmailViewAsync<TModel>(string aBaseViewName, TModel aModel) Parameters aBaseViewName string Base view name aModel TModel Model to render Returns Task<UFEmailContentModel> A UFEmailContentModel instance Type Parameters TModel Type of model data Remarks If a view can not be found, the value for that property will be set to true. If the HTML view can not be found, the method tries aBaseViewName itself as view name. RenderViewAsync<TModel>(string, TModel) Renders a Razor view and its model data to a string. If the view can not be found the method with raise an exception. public Task<string?> RenderViewAsync<TModel>(string aViewName, TModel aModel) Parameters aViewName string Name of view aModel TModel Model data Returns Task<string> Rendered view Type Parameters TModel Type of model data"
  },
  "api/UltraForce.Library.Core.Asp.Services.UFScopedBackgroundService-1.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFScopedBackgroundService-1.html",
    "title": "Class UFScopedBackgroundService<TAsynchronousExecutableService> | UltraForce.Library.Core.Asp",
    "keywords": "Class UFScopedBackgroundService<TAsynchronousExecutableService> Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll A background service helper class to execute a service in the background using its own service scope. Note: do not forget to register the TAsynchronousExecutableService type at the service provider. The code is based on: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0#consuming-a-scoped-service-in-a-background-task-1 public class UFScopedBackgroundService<TAsynchronousExecutableService> : BackgroundService, IHostedService, IDisposable where TAsynchronousExecutableService : IUFAsynchronousExecutableService Type Parameters TAsynchronousExecutableService Inheritance object BackgroundService UFScopedBackgroundService<TAsynchronousExecutableService> Implements IHostedService IDisposable Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFScopedBackgroundService(IServiceProvider, ILogger<UFScopedBackgroundService<TAsynchronousExecutableService>>) Constructs an instance of UFScopedBackgroundService<TAsynchronousExecutableService> public UFScopedBackgroundService(IServiceProvider aServices, ILogger<UFScopedBackgroundService<TAsynchronousExecutableService>> aLogger) Parameters aServices IServiceProvider aLogger ILogger<UFScopedBackgroundService<TAsynchronousExecutableService>> Properties Services Reference to the services provider protected IServiceProvider Services { get; } Property Value IServiceProvider Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines. StopAsync(CancellationToken) Triggered when the application host is performing a graceful shutdown. public override Task StopAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Returns Task A Task that represents the asynchronous Stop operation."
  },
  "api/UltraForce.Library.Core.Asp.Services.UFTheme.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.UFTheme.html",
    "title": "Class UFTheme | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTheme Namespace UltraForce.Library.Core.Asp.Services Assembly UltraForce.Library.Core.Asp.dll UFTheme can be used as a base class for themes. It returns empty strings for html and css classes methods. public class UFTheme : IUFTheme Inheritance object UFTheme Implements IUFTheme Derived UFFontAwesomeTheme Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetButtonCaptionClasses(IUFButtonProperties) Gets the css classes to use for the caption element within a button. public virtual string GetButtonCaptionClasses(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties The button property values Returns string One or more css classes to style the caption. GetButtonClasses(IUFButtonProperties) Gets the css classes to use for the button element. public virtual string GetButtonClasses(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties The button property values Returns string One or more css classes to style the button. GetButtonIconHtml(IUFButtonProperties) Gets the html for an icon. public virtual string GetButtonIconHtml(IUFButtonProperties aProperties) Parameters aProperties IUFButtonProperties Returns string Html snippet or empty string if there is no icon GetCheckboxExtraHtml() Gets the extra html to render after the checkbox input element. It can be used when using custom graphics. public virtual string GetCheckboxExtraHtml() Returns string GetCheckboxInputClasses() Returns the css classes to use for the checkbox input element. public virtual string GetCheckboxInputClasses() Returns string GetCheckboxLabelClasses() Returns the css classes to use for the label of a checkbox element. public virtual string GetCheckboxLabelClasses() Returns string GetCheckboxLabelDescriptionClasses() Returns the css classes to use for the description within the checkbox label element. public virtual string GetCheckboxLabelDescriptionClasses() Returns string GetCheckboxLabelSpanClasses() Returns the css classes to use for the text within the checkbox label element. public virtual string GetCheckboxLabelSpanClasses() Returns string GetCheckboxWrapperClasses() Returns the css classes to use for the wrapper of a checkbox element. public virtual string GetCheckboxWrapperClasses() Returns string GetColumnClasses(IUFFlexProperties) Returns the css classes to use for the column element. public virtual string GetColumnClasses(IUFFlexProperties aProperties) Parameters aProperties IUFFlexProperties Returns string GetContainerClasses(IUFContainerProperties) Gets the css classes to use for the container element. public virtual string GetContainerClasses(IUFContainerProperties aProperties) Parameters aProperties IUFContainerProperties The container property values Returns string One or more css classes to style the container. GetDataListClasses() Gets the css classes to use for the data list element. public virtual string GetDataListClasses() Returns string One or more css classes to style the data list. GetDataNameClasses() Gets the css classes to use for the data name element. public virtual string GetDataNameClasses() Returns string One or more css classes to style the data name. GetDataValueClasses() Gets the css classes to use for the data value element. public virtual string GetDataValueClasses() Returns string One or more css classes to style the data value. GetFieldErrorsClasses() Returns the css classes to use for the wrapper of the errors. public virtual string GetFieldErrorsClasses() Returns string GetFieldErrorsHtml(ModelStateDictionary, string) Renders the errors for an input field. The default implementation calls GetErrors(ModelStateDictionary, string, string, string, string) using br-tag as separator. public virtual string GetFieldErrorsHtml(ModelStateDictionary aModelState, string aName) Parameters aModelState ModelStateDictionary aName string Returns string GetFilterButtonClasses() Returns the css classes to use for button element within the filter container. public virtual string GetFilterButtonClasses() Returns string GetFilterContainerClasses() Returns the css classes to use for the filter container element shown above the table if Filter is true. public virtual string GetFilterContainerClasses() Returns string GetFilterInputClasses() Returns the css classes to use for input element within the filter container. public virtual string GetFilterInputClasses() Returns string GetFilterLabelClasses() Returns the css classes to use for the label element within the filter container. public virtual string GetFilterLabelClasses() Returns string GetRadioExtraHtml() The default implementation returns the value of GetCheckboxExtraHtml(). public virtual string GetRadioExtraHtml() Returns string GetRadioInputClasses() The default implementation returns the value of GetCheckboxInputClasses(). public virtual string GetRadioInputClasses() Returns string GetRadioLabelClasses() The default implementation returns the value of GetCheckboxLabelClasses(). public virtual string GetRadioLabelClasses() Returns string GetRadioLabelDescriptionClasses() The default implementation returns the value of GetCheckboxLabelDescriptionClasses(). public virtual string GetRadioLabelDescriptionClasses() Returns string GetRadioLabelSpanClasses() The default implementation returns the value of GetCheckboxLabelSpanClasses(). public virtual string GetRadioLabelSpanClasses() Returns string GetRadioWrapperClasses() The default implementation returns the value of GetCheckboxWrapperClasses(). public virtual string GetRadioWrapperClasses() Returns string GetRowClasses(IUFFlexProperties) Returns the css classes to use for the row element. public virtual string GetRowClasses(IUFFlexProperties aProperties) Parameters aProperties IUFFlexProperties Returns string GetSelectClasses(IUFInputProperties) The default implementation returns the value of GetTextInputClasses(IUFInputProperties, string). public virtual string GetSelectClasses(IUFInputProperties aProperties) Parameters aProperties IUFInputProperties Returns string GetSortAscendingClasses() Returns the css classes to use for a table header element when the rows are sorted in an ascending order for that column. The css classes are added to the result from GetTableRowClasses(IUFTableRowProperties, IUFTableProperties). public virtual string GetSortAscendingClasses() Returns string GetSortDescendingClasses() Returns the css classes to use for a table header element when the rows are sorted in an descending order for that column. The css classes are added to the result from GetTableRowClasses(IUFTableRowProperties, IUFTableProperties). public virtual string GetSortDescendingClasses() Returns string GetSpacerClasses(IUFSpacerProperties) Returns the css classes to use for the spacer element. public virtual string GetSpacerClasses(IUFSpacerProperties aProperties) Parameters aProperties IUFSpacerProperties Returns string GetTabContentWrapperClasses(IUFTabProperties) Gets the css classes to use for the content wrapper element with a tab. public virtual string GetTabContentWrapperClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTabLabelClasses(IUFTabProperties) Gets the css classes to use for the label element with a tab. public virtual string GetTabLabelClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTabRadioClasses(IUFTabProperties) Gets the css classes to use for the radio element with a tab. public virtual string GetTabRadioClasses(IUFTabProperties aProperties) Parameters aProperties IUFTabProperties Returns string GetTableCellClasses(IUFCellProperties, UFTableCellType, IUFTableProperties, IUFTableRowProperties) Returns the css classes to use for the table cell (td/th) element. public virtual string GetTableCellClasses(IUFCellProperties aProperties, UFTableCellType aType, IUFTableProperties aTableProperties, IUFTableRowProperties aRowProperties) Parameters aProperties IUFCellProperties aType UFTableCellType aTableProperties IUFTableProperties aRowProperties IUFTableRowProperties Returns string GetTableClasses(IUFTableProperties) Returns the css classes to use for the table element. public virtual string GetTableClasses(IUFTableProperties aProperties) Parameters aProperties IUFTableProperties Returns string GetTableHeaderButtonClasses(IUFCellProperties, IUFTableProperties, IUFTableRowProperties) Returns the css classes to use for the button element within a table header cell that is added when the table is sortable. public virtual string GetTableHeaderButtonClasses(IUFCellProperties aProperties, IUFTableProperties aTableProperties, IUFTableRowProperties aRowProperties) Parameters aProperties IUFCellProperties aTableProperties IUFTableProperties aRowProperties IUFTableRowProperties Returns string GetTableRowClasses(IUFTableRowProperties, IUFTableProperties) Returns the css classes to use for the table row (tr) element. public virtual string GetTableRowClasses(IUFTableRowProperties aProperties, IUFTableProperties aTableProperties) Parameters aProperties IUFTableRowProperties aTableProperties IUFTableProperties Returns string GetTabsClasses(int) Gets the css classes to use for the tabs container element. public virtual string GetTabsClasses(int aCount) Parameters aCount int Number of tabs the container contains Returns string GetTextInputClasses(IUFInputProperties, string) Returns the css classes to use with the text input element. public virtual string GetTextInputClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelClasses(IUFInputProperties, string) Returns the css classes to use with the label for text input and select elements. public virtual string GetTextLabelClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelDescriptionClasses(IUFInputProperties, string) Returns the css classes to use with the description within label for text input and select elements. public virtual string GetTextLabelDescriptionClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextLabelSpanClasses(IUFInputProperties, string) Returns the css classes to use with the span within the label for text input and select elements. public virtual string GetTextLabelSpanClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetTextWrapperClasses(IUFInputProperties, string) Returns the css classes to use with the wrapper element for text input and select elements. public virtual string GetTextWrapperClasses(IUFInputProperties aProperties, string aType) Parameters aProperties IUFInputProperties aType string Type the input is created for Returns string GetValidationFeedbackClasses() Returns css classes to use for the validation feedback container. The default implementation returns the value of GetFieldErrorsClasses(). protected virtual string GetValidationFeedbackClasses() Returns string GetValidationFeedbackContainerHtml(string) Returns the html for the validation feedback container. The default implementation returns: <span class=\"{GetValidationFeedbackClasses()}\" data-valmsg-for=\"{anId}\" data-valmsg-replace=\"true\"></span> public virtual string GetValidationFeedbackContainerHtml(string anId) Parameters anId string Returns string IsCssClass(string) The default implementation checks if the value ends with: \"px\", \"pt\", \"em\", \"rem\" or \"%\". public virtual bool IsCssClass(string aValue) Parameters aValue string Returns bool"
  },
  "api/UltraForce.Library.Core.Asp.Services.html": {
    "href": "api/UltraForce.Library.Core.Asp.Services.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Services | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Services Classes UFDutchIdentityErrorDescriber This class uses error messages in Dutch. UFFontAwesomeTheme UFFontAwesomeTheme implements icon related methods for use with font awesome. UFModelExpressionRenderer An implementation of IUFModelExpressionRenderer. UFRazorViewRenderer A service to help renders a razor view to a string. Register this class as a Transient service with the service collection. UFScopedBackgroundService<TAsynchronousExecutableService> A background service helper class to execute a service in the background using its own service scope. Note: do not forget to register the TAsynchronousExecutableService type at the service provider. The code is based on: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-5.0#consuming-a-scoped-service-in-a-background-task-1 UFTheme UFTheme can be used as a base class for themes. It returns empty strings for html and css classes methods. Interfaces IUFAsynchronousExecutableService An interface defining a method that will be run asynchronously. It is based on the BackgroundService. IUFModelExpressionRenderer Defines a renderer for ModelExpressions. IUFTheme IUFTheme generates css classes and html for the different components."
  },
  "api/UltraForce.Library.Core.Asp.Sessions.IUFSessionMessages.html": {
    "href": "api/UltraForce.Library.Core.Asp.Sessions.IUFSessionMessages.html",
    "title": "Interface IUFSessionMessages | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFSessionMessages Namespace UltraForce.Library.Core.Asp.Sessions Assembly UltraForce.Library.Core.Asp.dll Interface with properties that map to session data. public interface IUFSessionMessages Methods Add(string) Adds a message to show in page void Add(string aMessage) Parameters aMessage string Message to show AddError(string) Adds an error message to show in page void AddError(string aMessage) Parameters aMessage string Message to show AddWarning(string) Adds a warning message to show in page void AddWarning(string aMessage) Parameters aMessage string Message to show Clear() Clears all stored messages void Clear() GetErrorMessages() Gets all error messages IEnumerable<string> GetErrorMessages() Returns IEnumerable<string> messages GetMessages() Gets all messages IEnumerable<string> GetMessages() Returns IEnumerable<string> messages GetWarningMessages() Gets all warning messages IEnumerable<string> GetWarningMessages() Returns IEnumerable<string> messages HasMessages() Checks if there are any messages. bool HasMessages() Returns bool True if there is at least one message"
  },
  "api/UltraForce.Library.Core.Asp.Sessions.UFSessionKeyedStorage.html": {
    "href": "api/UltraForce.Library.Core.Asp.Sessions.UFSessionKeyedStorage.html",
    "title": "Class UFSessionKeyedStorage | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSessionKeyedStorage Namespace UltraForce.Library.Core.Asp.Sessions Assembly UltraForce.Library.Core.Asp.dll This class maps a UltraForce.Library.NetStandard.Storage.UFKeyedStorage to a ISession. public class UFSessionKeyedStorage : UFKeyedStorage Inheritance object UFKeyedStorage UFSessionKeyedStorage Inherited Members UFKeyedStorage.GetString(string) UFKeyedStorage.GetByte(string, byte) UFKeyedStorage.GetByte(string) UFKeyedStorage.SetByte(string, byte) UFKeyedStorage.GetSByte(string, sbyte) UFKeyedStorage.GetSByte(string) UFKeyedStorage.SetSByte(string, sbyte) UFKeyedStorage.GetShort(string, short) UFKeyedStorage.GetShort(string) UFKeyedStorage.SetShort(string, short) UFKeyedStorage.GetUShort(string, ushort) UFKeyedStorage.GetUShort(string) UFKeyedStorage.SetUShort(string, ushort) UFKeyedStorage.GetInt(string) UFKeyedStorage.GetUInt(string, uint) UFKeyedStorage.GetUInt(string) UFKeyedStorage.SetUInt(string, uint) UFKeyedStorage.GetLong(string, long) UFKeyedStorage.GetLong(string) UFKeyedStorage.SetLong(string, long) UFKeyedStorage.GetULong(string, ulong) UFKeyedStorage.GetULong(string) UFKeyedStorage.SetULong(string, ulong) UFKeyedStorage.GetFloat(string, float) UFKeyedStorage.GetFloat(string) UFKeyedStorage.SetFloat(string, float) UFKeyedStorage.GetDouble(string, double) UFKeyedStorage.GetDouble(string) UFKeyedStorage.SetDouble(string, double) UFKeyedStorage.GetBool(string, bool) UFKeyedStorage.GetBool(string) UFKeyedStorage.SetBool(string, bool) UFKeyedStorage.GetChar(string, char) UFKeyedStorage.GetChar(string) UFKeyedStorage.SetChar(string, char) UFKeyedStorage.GetBytes(string, byte[]) UFKeyedStorage.GetBytes(string) UFKeyedStorage.SetBytes(string, byte[]) UFKeyedStorage.GetDateTime(string, DateTime) UFKeyedStorage.GetDateTime(string) UFKeyedStorage.SetDateTime(string, DateTime) UFKeyedStorage.GetGuid(string, Guid) UFKeyedStorage.GetGuid(string) UFKeyedStorage.SetGuid(string, Guid) UFKeyedStorage.GetStorableObject(string, IUFStorableObject) UFKeyedStorage.SetStorableObject(string, IUFStorableObject) UFKeyedStorage.GetObject(string, Type) UFKeyedStorage.GetObject<T>(string) UFKeyedStorage.GetObject(string, Type, Func<Type, object>) UFKeyedStorage.SetObject(string, object, Type) UFKeyedStorage.SetObject(string, object) UFKeyedStorage.SetObject<T>(string, object) UFKeyedStorage.SerializeObject(string, object) UFKeyedStorage.DeserializeObject(string, Type, Func<Type, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFSessionKeyedStorage(ISession) This class maps a UltraForce.Library.NetStandard.Storage.UFKeyedStorage to a ISession. public UFSessionKeyedStorage(ISession aSession) Parameters aSession ISession Methods DeleteAll() public override void DeleteAll() DeleteKey(string) public override void DeleteKey(string aKey) Parameters aKey string GetInt(string, int) public override int GetInt(string aKey, int aDefault) Parameters aKey string aDefault int Returns int GetString(string, string) public override string GetString(string aKey, string aDefault) Parameters aKey string aDefault string Returns string HasKey(string) public override bool HasKey(string aKey) Parameters aKey string Returns bool SetInt(string, int) public override void SetInt(string aKey, int aValue) Parameters aKey string aValue int SetString(string, string) public override void SetString(string aKey, string aValue) Parameters aKey string aValue string"
  },
  "api/UltraForce.Library.Core.Asp.Sessions.UFSessionMessages.html": {
    "href": "api/UltraForce.Library.Core.Asp.Sessions.UFSessionMessages.html",
    "title": "Class UFSessionMessages | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSessionMessages Namespace UltraForce.Library.Core.Asp.Sessions Assembly UltraForce.Library.Core.Asp.dll UFSessionMessages can be used to store messages in a session or retrieve them to be show them inside a view. To use this class, register this class as a scoped service. If there is no session because either the class fails to get a HttpContext or the ISession; messages will be not be stored and the get messages methods will return empty lists. public sealed class UFSessionMessages Inheritance object UFSessionMessages Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UFSessionMessages(IHttpContextAccessor) UFSessionMessages can be used to store messages in a session or retrieve them to be show them inside a view. To use this class, register this class as a scoped service. If there is no session because either the class fails to get a HttpContext or the ISession; messages will be not be stored and the get messages methods will return empty lists. public UFSessionMessages(IHttpContextAccessor anAccessor) Parameters anAccessor IHttpContextAccessor Methods Add(string) Adds a message to show in page public void Add(string aMessage) Parameters aMessage string Message to show AddError(string) Adds an error message to show in page public void AddError(string aMessage) Parameters aMessage string Message to show AddWarning(string) Adds a warning message to show in page public void AddWarning(string aMessage) Parameters aMessage string Message to show Clear() Clears all stored messages public void Clear() GetErrorMessages() Gets all error messages public IEnumerable<string> GetErrorMessages() Returns IEnumerable<string> messages GetMessages() Gets all messages public IEnumerable<string> GetMessages() Returns IEnumerable<string> messages GetWarningMessages() Gets all warning messages public IEnumerable<string> GetWarningMessages() Returns IEnumerable<string> messages HasMessages() Checks if there are any messages. public bool HasMessages() Returns bool True if there is at least one message"
  },
  "api/UltraForce.Library.Core.Asp.Sessions.UFSessionMiddleware.html": {
    "href": "api/UltraForce.Library.Core.Asp.Sessions.UFSessionMiddleware.html",
    "title": "Class UFSessionMiddleware | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSessionMiddleware Namespace UltraForce.Library.Core.Asp.Sessions Assembly UltraForce.Library.Core.Asp.dll UFSessionMiddleware is UltraForce.Library.NetStandard.Storage.UFKeyedStorage implementation mapping to Session. Use Instance to access the singleton instance. To use UFSessionMiddleware, import UFWebExtensions in Startup.cs or Program.cs and register it at IApplicationBuilder as middleware: `builder.UseUFSession();` UseUFSession() will make a call to UseSession(). public class UFSessionMiddleware : UFKeyedStorage Inheritance object UFKeyedStorage UFSessionMiddleware Inherited Members UFKeyedStorage.GetString(string) UFKeyedStorage.GetByte(string, byte) UFKeyedStorage.GetByte(string) UFKeyedStorage.SetByte(string, byte) UFKeyedStorage.GetSByte(string, sbyte) UFKeyedStorage.GetSByte(string) UFKeyedStorage.SetSByte(string, sbyte) UFKeyedStorage.GetShort(string, short) UFKeyedStorage.GetShort(string) UFKeyedStorage.SetShort(string, short) UFKeyedStorage.GetUShort(string, ushort) UFKeyedStorage.GetUShort(string) UFKeyedStorage.SetUShort(string, ushort) UFKeyedStorage.GetInt(string) UFKeyedStorage.GetUInt(string, uint) UFKeyedStorage.GetUInt(string) UFKeyedStorage.SetUInt(string, uint) UFKeyedStorage.GetLong(string, long) UFKeyedStorage.GetLong(string) UFKeyedStorage.SetLong(string, long) UFKeyedStorage.GetULong(string, ulong) UFKeyedStorage.GetULong(string) UFKeyedStorage.SetULong(string, ulong) UFKeyedStorage.GetFloat(string, float) UFKeyedStorage.GetFloat(string) UFKeyedStorage.SetFloat(string, float) UFKeyedStorage.GetDouble(string, double) UFKeyedStorage.GetDouble(string) UFKeyedStorage.SetDouble(string, double) UFKeyedStorage.GetBool(string, bool) UFKeyedStorage.GetBool(string) UFKeyedStorage.SetBool(string, bool) UFKeyedStorage.GetChar(string, char) UFKeyedStorage.GetChar(string) UFKeyedStorage.SetChar(string, char) UFKeyedStorage.GetBytes(string, byte[]) UFKeyedStorage.GetBytes(string) UFKeyedStorage.SetBytes(string, byte[]) UFKeyedStorage.GetDateTime(string, DateTime) UFKeyedStorage.GetDateTime(string) UFKeyedStorage.SetDateTime(string, DateTime) UFKeyedStorage.GetGuid(string, Guid) UFKeyedStorage.GetGuid(string) UFKeyedStorage.SetGuid(string, Guid) UFKeyedStorage.GetStorableObject(string, IUFStorableObject) UFKeyedStorage.SetStorableObject(string, IUFStorableObject) UFKeyedStorage.GetObject(string, Type) UFKeyedStorage.GetObject<T>(string) UFKeyedStorage.GetObject(string, Type, Func<Type, object>) UFKeyedStorage.SetObject(string, object, Type) UFKeyedStorage.SetObject(string, object) UFKeyedStorage.SetObject<T>(string, object) UFKeyedStorage.SerializeObject(string, object) UFKeyedStorage.DeserializeObject(string, Type, Func<Type, object>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFSessionMiddleware(RequestDelegate) Constructs an instance of the UFSession middleware. public UFSessionMiddleware(RequestDelegate aNext) Parameters aNext RequestDelegate Next middleware Properties Instance Reference to singleton instance. public static UFSessionMiddleware Instance { get; } Property Value UFSessionMiddleware Methods DeleteAll() public override void DeleteAll() DeleteKey(string) public override void DeleteKey(string aKey) Parameters aKey string GetInt(string, int) public override int GetInt(string aKey, int aDefault) Parameters aKey string aDefault int Returns int GetString(string, string) public override string GetString(string aKey, string aDefault) Parameters aKey string aDefault string Returns string HasKey(string) public override bool HasKey(string aKey) Parameters aKey string Returns bool Invoke(HttpContext) This method is called by the http rendering pipeline. public Task Invoke(HttpContext aContext) Parameters aContext HttpContext Current HttpContext Returns Task result from next middleware SetInt(string, int) public override void SetInt(string aKey, int aValue) Parameters aKey string aValue int SetString(string, string) public override void SetString(string aKey, string aValue) Parameters aKey string aValue string"
  },
  "api/UltraForce.Library.Core.Asp.Sessions.html": {
    "href": "api/UltraForce.Library.Core.Asp.Sessions.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Sessions | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Sessions Classes UFSessionKeyedStorage This class maps a UltraForce.Library.NetStandard.Storage.UFKeyedStorage to a ISession. UFSessionMessages UFSessionMessages can be used to store messages in a session or retrieve them to be show them inside a view. To use this class, register this class as a scoped service. If there is no session because either the class fails to get a HttpContext or the ISession; messages will be not be stored and the get messages methods will return empty lists."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFClickableTagHelperBase.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFClickableTagHelperBase.html",
    "title": "Class UFClickableTagHelperBase | UltraForce.Library.Core.Asp",
    "keywords": "Class UFClickableTagHelperBase Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib Assembly UltraForce.Library.Core.Asp.dll UFClickableTagHelperBase can be used as base class for elements that can be clicked upon and will jump to some other page. It defines various properties to create an url from. Subclasses can call the GetHref(TagHelperOutput) to get the href value. public class UFClickableTagHelperBase : UFTagHelperWithViewContext, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFClickableTagHelperBase Implements ITagHelper ITagHelperComponent Derived UFButtonTagHelper Inherited Members UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFClickableTagHelperBase(IHtmlGenerator, IUFTheme) Constructs an instance UFClickableTagHelperBase. protected UFClickableTagHelperBase(IHtmlGenerator aHtmlGenerator, IUFTheme aTheme) Parameters aHtmlGenerator IHtmlGenerator Used to generate an href value aTheme IUFTheme Properties Action When set generate an url and use anchor tag instead of a button tag. [HtmlAttributeName(\"action\")] public string? Action { get; set; } Property Value string Controller When set generate an url and use anchor tag instead of a button tag. [HtmlAttributeName(\"controller\")] public string? Controller { get; set; } Property Value string Href When set, use a anchor tag instead of a button tag. [HtmlAttributeName(\"href\")] public string? Href { get; set; } Property Value string HtmlGenerator Gets the IHtmlGenerator used to generate the AnchorTagHelper's output. protected IHtmlGenerator HtmlGenerator { get; } Property Value IHtmlGenerator NewTab Only used if Href contains a value. When true open the link in a new tab. [HtmlAttributeName(\"new-tab\")] public bool NewTab { get; set; } Property Value bool RouteValues Additional parameters for the route. Only used if Action and/or Controller are used. For the attribute name add the name of the parameter to `route-`. Example: `route-id=\"123\"` [HtmlAttributeName(\"all-route-data\", DictionaryAttributePrefix = \"route-\")] public IDictionary<string, string> RouteValues { get; set; } Property Value IDictionary<string, string> Methods GetHref(TagHelperOutput) Gets the href. If a controller and/or action is set build the url from these, else check the href attribute. protected string? GetHref(TagHelperOutput anOutput) Parameters anOutput TagHelperOutput Returns string HasHref(TagHelperOutput) Determines the href value via GetHref(TagHelperOutput) and sets the href attribute and target attribute if NewTab is true. protected bool HasHref(TagHelperOutput anOutput) Parameters anOutput TagHelperOutput Returns bool True if a href value could be determined"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithModelExpressionRenderer.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithModelExpressionRenderer.html",
    "title": "Class UFTagHelperWithModelExpressionRenderer | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTagHelperWithModelExpressionRenderer Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib Assembly UltraForce.Library.Core.Asp.dll This class extends UFTagHelperWithViewContext and adds a ModelExpressionRenderer property. It assumes a tag helper using a model expression renderer will also need a view context. public abstract class UFTagHelperWithModelExpressionRenderer : UFTagHelperWithViewContext, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFTagHelperWithModelExpressionRenderer Implements ITagHelper ITagHelperComponent Derived UFDataItemTagHelper UFDataNameTagHelper UFDataValueTagHelper UFCellTagHelper Inherited Members UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTagHelperWithModelExpressionRenderer(IUFModelExpressionRenderer, IUFTheme) Constructs an instance of the UFTagHelperWithModelExpressionRenderer. protected UFTagHelperWithModelExpressionRenderer(IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties ModelExpressionRenderer protected IUFModelExpressionRenderer ModelExpressionRenderer { get; } Property Value IUFModelExpressionRenderer"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithTheme.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithTheme.html",
    "title": "Class UFTagHelperWithTheme | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTagHelperWithTheme Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib Assembly UltraForce.Library.Core.Asp.dll Base class for tag helpers that need a theme. public class UFTagHelperWithTheme : TagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme Implements ITagHelper ITagHelperComponent Derived UFTagHelperWithViewContext UFContainerTagHelper UFTabTagHelper UFTabsTagHelper UFDataListTagHelper UFColumnTagHelper UFRowTagHelper UFSpacerTagHelper UFTableRowTagHelper UFTableTagHelper Inherited Members TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTagHelperWithTheme(IUFTheme) Constructs an instance of UFTagHelperWithTheme protected UFTagHelperWithTheme(IUFTheme aTheme) Parameters aTheme IUFTheme Properties Theme Theme to use for styling. protected IUFTheme Theme { get; } Property Value IUFTheme"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithViewContext.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.UFTagHelperWithViewContext.html",
    "title": "Class UFTagHelperWithViewContext | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTagHelperWithViewContext Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib Assembly UltraForce.Library.Core.Asp.dll Base class for tag helpers. It exposes ViewContext property. public class UFTagHelperWithViewContext : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext Implements ITagHelper ITagHelperComponent Derived UFClickableTagHelperBase UFTagHelperWithModelExpressionRenderer Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTagHelperWithViewContext(IUFTheme) Constructs an instance of UFTagHelperWithViewContext protected UFTagHelperWithViewContext(IUFTheme aTheme) Parameters aTheme IUFTheme Properties ViewContext View context (will be set externally by the razor engine) [HtmlAttributeNotBound] [ViewContext] public ViewContext ViewContext { get; set; } Property Value ViewContext"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Lib.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Lib Classes UFClickableTagHelperBase UFClickableTagHelperBase can be used as base class for elements that can be clicked upon and will jump to some other page. It defines various properties to create an url from. Subclasses can call the GetHref(TagHelperOutput) to get the href value. UFTagHelperWithModelExpressionRenderer This class extends UFTagHelperWithViewContext and adds a ModelExpressionRenderer property. It assumes a tag helper using a model expression renderer will also need a view context. UFTagHelperWithTheme Base class for tag helpers that need a theme. UFTagHelperWithViewContext Base class for tag helpers. It exposes ViewContext property."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.IUFButtonProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.IUFButtonProperties.html",
    "title": "Interface IUFButtonProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFButtonProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons Assembly UltraForce.Library.Core.Asp.dll The properties for a button. public interface IUFButtonProperties Properties Color Color scheme to use for the button. UFButtonColor Color { get; set; } Property Value UFButtonColor Disabled Sets the disabled attribute. Note that this does nothing if the anchor tag is used. bool Disabled { get; set; } Property Value bool Icon Optional font awesome icon to show in the button. Use the name without the fa- prefix. string? Icon { get; set; } Property Value string IconPosition Position of the icon in the button. Only of use if Icon has been set. UFButtonIconPosition IconPosition { get; set; } Property Value UFButtonIconPosition Interactive When false the button is rendered with a div element. bool Interactive { get; set; } Property Value bool Size Size of the button. UFButtonSize Size { get; set; } Property Value UFButtonSize Styled Use style to set multiple properties to a predefined value. UFButtonStyle Styled { get; set; } Property Value UFButtonStyle Variant Style to draw the button in. UFButtonVariant Variant { get; set; } Property Value UFButtonVariant"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.UFButtonProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.UFButtonProperties.html",
    "title": "Class UFButtonProperties | UltraForce.Library.Core.Asp",
    "keywords": "Class UFButtonProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons Assembly UltraForce.Library.Core.Asp.dll A simple implementation of the IUFButtonProperties. Assigning default values to each property. public class UFButtonProperties : IUFButtonProperties Inheritance object UFButtonProperties Implements IUFButtonProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Color Color scheme to use for the button. public UFButtonColor Color { get; set; } Property Value UFButtonColor Disabled Sets the disabled attribute. Note that this does nothing if the anchor tag is used. public bool Disabled { get; set; } Property Value bool Icon Optional font awesome icon to show in the button. Use the name without the fa- prefix. public string? Icon { get; set; } Property Value string IconPosition Position of the icon in the button. Only of use if Icon has been set. public UFButtonIconPosition IconPosition { get; set; } Property Value UFButtonIconPosition Interactive When false the button is rendered with a div element. public bool Interactive { get; set; } Property Value bool Size Size of the button. public UFButtonSize Size { get; set; } Property Value UFButtonSize Styled Use style to set multiple properties to a predefined value. public UFButtonStyle Styled { get; set; } Property Value UFButtonStyle Variant Style to draw the button in. public UFButtonVariant Variant { get; set; } Property Value UFButtonVariant"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.UFButtonTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.UFButtonTagHelper.html",
    "title": "Class UFButtonTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFButtonTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons Assembly UltraForce.Library.Core.Asp.dll Renders a button or link using a button styling. Renders: <{a|button|div} class=\"{GetButtonCssClasses()}\" {href} {disabled}> {GetButtonIconHtml()} <span class=\"{GetButtonCaptionCssClasses()}\">{children}</span> </{a|button|div}> Part of the code is based on the AnchorTagHelper implemenation. [HtmlTargetElement(\"uf-button\")] public class UFButtonTagHelper : UFClickableTagHelperBase, ITagHelper, ITagHelperComponent, IUFButtonProperties Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFClickableTagHelperBase UFButtonTagHelper Implements ITagHelper ITagHelperComponent IUFButtonProperties Inherited Members UFClickableTagHelperBase.Action UFClickableTagHelperBase.Controller UFClickableTagHelperBase.Href UFClickableTagHelperBase.NewTab UFClickableTagHelperBase.RouteValues UFClickableTagHelperBase.HtmlGenerator UFClickableTagHelperBase.HasHref(TagHelperOutput) UFClickableTagHelperBase.GetHref(TagHelperOutput) UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFButtonTagHelper(IHtmlGenerator, IUFModelExpressionRenderer, IUFTheme) Renders a button or link using a button styling. Renders: <{a|button|div} class=\"{GetButtonCssClasses()}\" {href} {disabled}> {GetButtonIconHtml()} <span class=\"{GetButtonCaptionCssClasses()}\">{children}</span> </{a|button|div}> Part of the code is based on the AnchorTagHelper implemenation. public UFButtonTagHelper(IHtmlGenerator aHtmlGenerator, IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aHtmlGenerator IHtmlGenerator aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties Clipboard When set, an onclick handler is added to copy the value to the clipboard. public string? Clipboard { get; set; } Property Value string Color Color scheme to use for the button. [HtmlAttributeName(\"color\")] public UFButtonColor Color { get; set; } Property Value UFButtonColor Disabled Sets the disabled attribute. Note that this does nothing if the anchor tag is used. [HtmlAttributeName(\"disabled\")] public bool Disabled { get; set; } Property Value bool For When set, use it to get a name for. The Name property is ignored. public ModelExpression? For { get; set; } Property Value ModelExpression Icon Optional font awesome icon to show in the button. Use the name without the fa- prefix. [HtmlAttributeName(\"icon\")] public string? Icon { get; set; } Property Value string IconPosition Position of the icon in the button. Only of use if Icon has been set. [HtmlAttributeName(\"icon-position\")] public UFButtonIconPosition IconPosition { get; set; } Property Value UFButtonIconPosition Interactive When false the button is rendered with a div element. [HtmlAttributeName(\"interactive\")] public bool Interactive { get; set; } Property Value bool ModelExpressionRenderer protected IUFModelExpressionRenderer ModelExpressionRenderer { get; } Property Value IUFModelExpressionRenderer Name When set, set a name attribute. public string? Name { get; set; } Property Value string OnClick Value to set for the onclick attribute of the button. This property is ignored if Clipboard has been set. [HtmlAttributeName(\"on-click\")] public string? OnClick { get; set; } Property Value string Size Size of the button. [HtmlAttributeName(\"size\")] public UFButtonSize Size { get; set; } Property Value UFButtonSize Styled Use style to set multiple properties to a predefined value. [HtmlAttributeName(\"styled\")] public UFButtonStyle Styled { get; set; } Property Value UFButtonStyle Value When set, set a value attribute. public string? Value { get; set; } Property Value string Variant Style to draw the button in. [HtmlAttributeName(\"variant\")] public UFButtonVariant Variant { get; set; } Property Value UFButtonVariant Methods GetButtonCaptionClasses() The default implementation calls GetButtonCaptionClasses(IUFButtonProperties). protected virtual string GetButtonCaptionClasses() Returns string GetButtonClasses() The default implementation calls GetButtonClasses(IUFButtonProperties). protected virtual string GetButtonClasses() Returns string GetButtonIconHtml() The default implementation calls GetButtonIconHtml(IUFButtonProperties). protected virtual string GetButtonIconHtml() Returns string ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag. Returns Task A Task that on completion updates the output. Remarks By default this calls into Process(TagHelperContext, TagHelperOutput)."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Buttons Classes UFButtonProperties A simple implementation of the IUFButtonProperties. Assigning default values to each property. UFButtonTagHelper Renders a button or link using a button styling. Renders: <{a|button|div} class=\"{GetButtonCssClasses()}\" {href} {disabled}> {GetButtonIconHtml()} <span class=\"{GetButtonCaptionCssClasses()}\">{children}</span> </{a|button|div}> Part of the code is based on the AnchorTagHelper implemenation. Interfaces IUFButtonProperties The properties for a button."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.IUFContainerProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.IUFContainerProperties.html",
    "title": "Interface IUFContainerProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFContainerProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll Properties for a container that can optionally position its child content. public interface IUFContainerProperties Properties FullHeight When true use the height of the parent, otherwise use the height of the content. bool FullHeight { get; set; } Property Value bool FullWidth When true use the width of the parent, otherwise use the width of the content. bool FullWidth { get; set; } Property Value bool Horizontal How to position the child horizontally within the container. UFContentPosition Horizontal { get; set; } Property Value UFContentPosition Padding Padding to add to the container. int Padding { get; set; } Property Value int PositionChild When true position the children in the container using Horizontal and Vertical. bool PositionChild { get; set; } Property Value bool Vertical How to position the child vertically within the container. UFContentPosition Vertical { get; set; } Property Value UFContentPosition"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.IUFTabProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.IUFTabProperties.html",
    "title": "Interface IUFTabProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFTabProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll public interface IUFTabProperties Properties Caption Caption of the tag. Can be html formatted. string Caption { get; set; } Property Value string Selected Initial state of the tab. If true, the tab will be selected. bool Selected { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFContainerProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFContainerProperties.html",
    "title": "Class UFContainerProperties | UltraForce.Library.Core.Asp",
    "keywords": "Class UFContainerProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll public class UFContainerProperties : IUFContainerProperties Inheritance object UFContainerProperties Implements IUFContainerProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FullHeight When true use the height of the parent, otherwise use the height of the content. public bool FullHeight { get; set; } Property Value bool FullWidth When true use the width of the parent, otherwise use the width of the content. public bool FullWidth { get; set; } Property Value bool Horizontal How to position the child horizontally within the container. public UFContentPosition Horizontal { get; set; } Property Value UFContentPosition Padding Padding to add to the container. public int Padding { get; set; } Property Value int PositionChild When true position the children in the container using Horizontal and Vertical. public bool PositionChild { get; set; } Property Value bool Vertical How to position the child vertically within the container. public UFContentPosition Vertical { get; set; } Property Value UFContentPosition"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFContainerTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFContainerTagHelper.html",
    "title": "Class UFContainerTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFContainerTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll This tag helper renders a container with various options. Renders: <div class=\"{GetContainerClasses()}\"> {children} </div> [HtmlTargetElement(\"uf-container\")] public class UFContainerTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFContainerProperties Inheritance object TagHelper UFTagHelperWithTheme UFContainerTagHelper Implements ITagHelper ITagHelperComponent IUFContainerProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFContainerTagHelper(IUFTheme) This tag helper renders a container with various options. Renders: <div class=\"{GetContainerClasses()}\"> {children} </div> public UFContainerTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Properties FullHeight When true use the height of the parent, otherwise use the height of the content. [HtmlAttributeName(\"full-height\")] public bool FullHeight { get; set; } Property Value bool FullWidth When true use the width of the parent, otherwise use the width of the content. [HtmlAttributeName(\"full-width\")] public bool FullWidth { get; set; } Property Value bool Horizontal How to position the child horizontally within the container. [HtmlAttributeName(\"horizontal\")] public UFContentPosition Horizontal { get; set; } Property Value UFContentPosition Padding Padding to add to the container. [HtmlAttributeName(\"padding\")] public int Padding { get; set; } Property Value int PositionChild When true position the children in the container using Horizontal and Vertical. [HtmlAttributeName(\"position-child\")] public bool PositionChild { get; set; } Property Value bool Vertical How to position the child vertically within the container. [HtmlAttributeName(\"vertical\")] public UFContentPosition Vertical { get; set; } Property Value UFContentPosition Methods GetContainerClasses() The default implementation calls GetContainerClasses(IUFContainerProperties). protected virtual string GetContainerClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFTabTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFTabTagHelper.html",
    "title": "Class UFTabTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTabTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll This tag helper is used to render a tab container. It expects to be used as a child of a UFTabsTagHelper. The class renders the following html: <input type=\"radio\" name=\"..\" id=\"{internal}\" class=\"{GetRadioClasses()}\" [checked] /> <label for=\"{internal}\" class=\"{GetLabelClasses()}\">{Caption}</label> <div class=\"{GetContentWrapperClasses()}\"> {children} </div> The css classes should use '+' with the selectors. [HtmlTargetElement(\"uf-tab\")] public class UFTabTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFTabProperties Inheritance object TagHelper UFTagHelperWithTheme UFTabTagHelper Implements ITagHelper ITagHelperComponent IUFTabProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTabTagHelper(IUFTheme) This tag helper is used to render a tab container. It expects to be used as a child of a UFTabsTagHelper. The class renders the following html: <input type=\"radio\" name=\"..\" id=\"{internal}\" class=\"{GetRadioClasses()}\" [checked] /> <label for=\"{internal}\" class=\"{GetLabelClasses()}\">{Caption}</label> <div class=\"{GetContentWrapperClasses()}\"> {children} </div> The css classes should use '+' with the selectors. public UFTabTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Properties Caption Caption of the tag. Can be html formatted. [HtmlAttributeName(\"caption\")] public string Caption { get; set; } Property Value string Selected Initial state of the tab. If true, the tab will be selected. [HtmlAttributeName(\"selected\")] public bool Selected { get; set; } Property Value bool Methods GetContentWrapperClasses() The default implementation returns the result from GetTabContentWrapperClasses(IUFTabProperties). protected virtual string GetContentWrapperClasses() Returns string GetLabelClasses() The default implementation returns the result from GetTabLabelClasses(IUFTabProperties). protected virtual string GetLabelClasses() Returns string GetRadioClasses() The default implementation returns the result from GetTabRadioClasses(IUFTabProperties). protected virtual string GetRadioClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFTabsTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.UFTabsTagHelper.html",
    "title": "Class UFTabsTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTabsTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Assembly UltraForce.Library.Core.Asp.dll This tag helper is used to render a tab container. It expects its children to be instances of UFTabTagHelper. The class will render: <div class=\"{GetTabsClasses}\"> {children} </div> [HtmlTargetElement(\"uf-tabs\")] public class UFTabsTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTabsTagHelper Implements ITagHelper ITagHelperComponent Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTabsTagHelper(IUFTheme) This tag helper is used to render a tab container. It expects its children to be instances of UFTabTagHelper. The class will render: <div class=\"{GetTabsClasses}\"> {children} </div> public UFTabsTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Fields TabsRadioName The key that UFTabTagHelper can use to get the name of the radio button from the Items. public const string TabsRadioName = \"uf_tabs_radio_name\" Field Value string Methods GetTabsClasses(int) The default implementation returns the result from GetTabsClasses(int). protected virtual string GetTabsClasses(int aCount) Parameters aCount int Returns string ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag. Returns Task A Task that on completion updates the output. Remarks By default this calls into Process(TagHelperContext, TagHelperOutput)."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Containers Classes UFContainerProperties UFContainerTagHelper This tag helper renders a container with various options. Renders: <div class=\"{GetContainerClasses()}\"> {children} </div> UFTabTagHelper This tag helper is used to render a tab container. It expects to be used as a child of a UFTabsTagHelper. The class renders the following html: <input type=\"radio\" name=\"..\" id=\"{internal}\" class=\"{GetRadioClasses()}\" [checked] /> <label for=\"{internal}\" class=\"{GetLabelClasses()}\">{Caption}</label> <div class=\"{GetContentWrapperClasses()}\"> {children} </div> The css classes should use '+' with the selectors. UFTabsTagHelper This tag helper is used to render a tab container. It expects its children to be instances of UFTabTagHelper. The class will render: <div class=\"{GetTabsClasses}\"> {children} </div> Interfaces IUFContainerProperties Properties for a container that can optionally position its child content. IUFTabProperties"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataItemTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataItemTagHelper.html",
    "title": "Class UFDataItemTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDataItemTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data Assembly UltraForce.Library.Core.Asp.dll This tag helper renders both the name (dt tag) and the value (dd tag) of a data item. public class UFDataItemTagHelper : UFTagHelperWithModelExpressionRenderer, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFTagHelperWithModelExpressionRenderer UFDataItemTagHelper Implements ITagHelper ITagHelperComponent Inherited Members UFTagHelperWithModelExpressionRenderer.ModelExpressionRenderer UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDataItemTagHelper(IUFModelExpressionRenderer, IUFTheme) This tag helper renders both the name (dt tag) and the value (dd tag) of a data item. public UFDataItemTagHelper(IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties For When no content is set, use the (display) name of the model property. public ModelExpression? For { get; set; } Property Value ModelExpression Methods GetDataNameClasses() The default implementation calls GetDataNameClasses(). protected virtual string GetDataNameClasses() Returns string GetDataValueClasses() The default implementation calls GetDataValueClasses(). protected virtual string GetDataValueClasses() Returns string ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. Contains information associated with the current HTML tag. A stateful HTML element used to generate an HTML tag. A Task that on completion updates the output. By default this calls into Process(TagHelperContext, TagHelperOutput). . public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext output TagHelperOutput Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataListTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataListTagHelper.html",
    "title": "Class UFDataListTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDataListTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data Assembly UltraForce.Library.Core.Asp.dll Base class for rendering a data list. It just sets the tag to \"dl\". [HtmlTargetElement(\"uf-data-list\")] public class UFDataListTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFDataListTagHelper Implements ITagHelper ITagHelperComponent Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDataListTagHelper(IUFTheme) Base class for rendering a data list. It just sets the tag to \"dl\". public UFDataListTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Methods GetDataListClasses() The default implementation calls GetDataListClasses(). protected virtual string GetDataListClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataNameTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataNameTagHelper.html",
    "title": "Class UFDataNameTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDataNameTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data Assembly UltraForce.Library.Core.Asp.dll Base class for rendering a data definition. [HtmlTargetElement(\"uf-data-name\")] public class UFDataNameTagHelper : UFTagHelperWithModelExpressionRenderer, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFTagHelperWithModelExpressionRenderer UFDataNameTagHelper Implements ITagHelper ITagHelperComponent Inherited Members UFTagHelperWithModelExpressionRenderer.ModelExpressionRenderer UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDataNameTagHelper(IUFModelExpressionRenderer, IUFTheme) Base class for rendering a data definition. public UFDataNameTagHelper(IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties For When no content is set, use the (display) name of the model property. public ModelExpression? For { get; set; } Property Value ModelExpression Methods GetDataNameClasses() The default implementation calls GetDataNameClasses(). protected virtual string GetDataNameClasses() Returns string ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. Contains information associated with the current HTML tag. A stateful HTML element used to generate an HTML tag. A Task that on completion updates the output. By default this calls into Process(TagHelperContext, TagHelperOutput). . public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext output TagHelperOutput Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataValueTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.UFDataValueTagHelper.html",
    "title": "Class UFDataValueTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDataValueTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data Assembly UltraForce.Library.Core.Asp.dll Base class for rendering a data definition. [HtmlTargetElement(\"uf-data-value\")] public class UFDataValueTagHelper : UFTagHelperWithModelExpressionRenderer, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFTagHelperWithModelExpressionRenderer UFDataValueTagHelper Implements ITagHelper ITagHelperComponent Inherited Members UFTagHelperWithModelExpressionRenderer.ModelExpressionRenderer UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFDataValueTagHelper(IUFModelExpressionRenderer, IUFTheme) Base class for rendering a data definition. public UFDataValueTagHelper(IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties For When no content is set, use the (display) name of the model property. public ModelExpression? For { get; set; } Property Value ModelExpression Methods GetDataValueClasses() The default implementation calls GetDataValueClasses(). protected virtual string GetDataValueClasses() Returns string ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. Contains information associated with the current HTML tag. A stateful HTML element used to generate an HTML tag. A Task that on completion updates the output. By default this calls into Process(TagHelperContext, TagHelperOutput). . public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext output TagHelperOutput Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Data.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Data Classes UFDataItemTagHelper This tag helper renders both the name (dt tag) and the value (dd tag) of a data item. UFDataListTagHelper Base class for rendering a data list. It just sets the tag to \"dl\". UFDataNameTagHelper Base class for rendering a data definition. UFDataValueTagHelper Base class for rendering a data definition."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.IUFInputProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.IUFInputProperties.html",
    "title": "Interface IUFInputProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFInputProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms Assembly UltraForce.Library.Core.Asp.dll public interface IUFInputProperties Properties Description Additional text that is shown below the label. It is only used if Wrap is true. string Description { get; set; } Property Value string Label When set, use this value for label instead of getting from the For property. When Wrap is false, the property is only used with checkbox and radio elements. For other input elements the value is ignored. string Label { get; set; } Property Value string Multiline When true show a multiline text input (textarea). bool Multiline { get; set; } Property Value bool NoLabel When true do not render a label element. bool NoLabel { get; set; } Property Value bool NoWidth When true do not set a width. bool NoWidth { get; set; } Property Value bool Wrap When true, wrap input element in a div. With false just render the input element. bool Wrap { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFInputProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFInputProperties.html",
    "title": "Class UFInputProperties | UltraForce.Library.Core.Asp",
    "keywords": "Class UFInputProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms Assembly UltraForce.Library.Core.Asp.dll public class UFInputProperties : IUFInputProperties Inheritance object UFInputProperties Implements IUFInputProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Additional text that is shown below the label. It is only used if Wrap is true. public string Description { get; set; } Property Value string Label When set, use this value for label instead of getting from the For property. When Wrap is false, the property is only used with checkbox and radio elements. For other input elements the value is ignored. public string Label { get; set; } Property Value string Multiline When true show a multiline text input (textarea). public bool Multiline { get; set; } Property Value bool NoLabel When true do not render a label element. public bool NoLabel { get; set; } Property Value bool NoWidth When true do not set a width. public bool NoWidth { get; set; } Property Value bool Wrap When true, wrap input element in a div. With false just render the input element. public bool Wrap { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFInputTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFInputTagHelper.html",
    "title": "Class UFInputTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFInputTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms Assembly UltraForce.Library.Core.Asp.dll Renders either a text input, a checkbox or a radio button. If no id is set and Wrap is true the class will generate an id so the label can reference the input element. If there are no field errors, the field error block is not rendered. Renders text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders text input without wrapping: <input class=\"{Theme.GetTextInputClasses(type) .../> Renders multiline text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders multiline text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders multiline text input without wrapping: <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> Renders radio input with wrapping and a label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <label class=\"{Theme.GetRadioLabelClasses()}\"> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input with wrapping but no label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input without wrapping but with a label: <label class=\"{Theme.GetRadioLabelClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> Renders radio input without wrapping and without a label: <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} Renders checkbox input with wrapping and a label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input with wrapping but no label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input without wrapping but with a label: <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} ... /> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> Renders checkbox input without wrapping and without a label: <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} [HtmlTargetElement(\"uf-input\")] public class UFInputTagHelper : InputTagHelper, ITagHelper, ITagHelperComponent, IUFInputProperties Inheritance object TagHelper InputTagHelper UFInputTagHelper Implements ITagHelper ITagHelperComponent IUFInputProperties Inherited Members InputTagHelper.GetInputType(ModelExplorer, out string) InputTagHelper.Order InputTagHelper.Generator InputTagHelper.ViewContext InputTagHelper.For InputTagHelper.Format InputTagHelper.InputTypeName InputTagHelper.FormName InputTagHelper.Name InputTagHelper.Value TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFInputTagHelper(IHtmlGenerator, IUFTheme) Renders either a text input, a checkbox or a radio button. If no id is set and Wrap is true the class will generate an id so the label can reference the input element. If there are no field errors, the field error block is not rendered. Renders text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders text input without wrapping: <input class=\"{Theme.GetTextInputClasses(type) .../> Renders multiline text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders multiline text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders multiline text input without wrapping: <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> Renders radio input with wrapping and a label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <label class=\"{Theme.GetRadioLabelClasses()}\"> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input with wrapping but no label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input without wrapping but with a label: <label class=\"{Theme.GetRadioLabelClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> Renders radio input without wrapping and without a label: <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} Renders checkbox input with wrapping and a label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input with wrapping but no label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input without wrapping but with a label: <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} ... /> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> Renders checkbox input without wrapping and without a label: <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} public UFInputTagHelper(IHtmlGenerator generator, IUFTheme aTheme) Parameters generator IHtmlGenerator aTheme IUFTheme Properties Description Additional text that is shown below the label. It is only used if Wrap is true. [HtmlAttributeName(\"description\")] public string Description { get; set; } Property Value string Label When set, use this value for label instead of getting from the For property. When Wrap is false, the property is only used with checkbox and radio elements. For other input elements the value is ignored. [HtmlAttributeName(\"label\")] public string Label { get; set; } Property Value string Multiline When true show a multiline text input (textarea). [HtmlAttributeName(\"multiline\")] public bool Multiline { get; set; } Property Value bool NoLabel When true do not render a label element. [HtmlAttributeName(\"no-label\")] public bool NoLabel { get; set; } Property Value bool NoWidth When true do not set a width. [HtmlAttributeName(\"no-width\")] public bool NoWidth { get; set; } Property Value bool Theme protected IUFTheme Theme { get; } Property Value IUFTheme Wrap When true, wrap input element in a div. With false just render the input element. [HtmlAttributeName(\"wrap\")] public bool Wrap { get; set; } Property Value bool Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag. Remarks Does nothing if For is null. Exceptions InvalidOperationException Thrown if Format is non-null but For is null."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFSelectTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.UFSelectTagHelper.html",
    "title": "Class UFSelectTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSelectTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms Assembly UltraForce.Library.Core.Asp.dll Base class to help with rendering a select element. If not id is set and Wrap is true, the code will generate an id so the label can reference the select element. If there are no field errors, the field error block is not rendered. Renders with wrapping: <div class=\"{Theme.GetInputWrapperClasses()}\"> <label class=\"{Theme.GetInputLabelClasses()}\" for=\"{id}\">{label}</label> <select class=\"{Theme.GetSelectClasses() id={} ...\" > {children} </select> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders without wrapping: <select class=\"{Theme.GetSelectClasses()}\" > {children} </select> [HtmlTargetElement(\"uf-select\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFSelectTagHelper : SelectTagHelper, ITagHelper, ITagHelperComponent, IUFInputProperties Inheritance object TagHelper SelectTagHelper UFSelectTagHelper Implements ITagHelper ITagHelperComponent IUFInputProperties Inherited Members SelectTagHelper.Init(TagHelperContext) SelectTagHelper.Order SelectTagHelper.Generator SelectTagHelper.ViewContext SelectTagHelper.For SelectTagHelper.Items SelectTagHelper.Name TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFSelectTagHelper(IHtmlGenerator, IUFTheme) Base class to help with rendering a select element. If not id is set and Wrap is true, the code will generate an id so the label can reference the select element. If there are no field errors, the field error block is not rendered. Renders with wrapping: <div class=\"{Theme.GetInputWrapperClasses()}\"> <label class=\"{Theme.GetInputLabelClasses()}\" for=\"{id}\">{label}</label> <select class=\"{Theme.GetSelectClasses() id={} ...\" > {children} </select> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders without wrapping: <select class=\"{Theme.GetSelectClasses()}\" > {children} </select> public UFSelectTagHelper(IHtmlGenerator aGenerator, IUFTheme aTheme) Parameters aGenerator IHtmlGenerator aTheme IUFTheme Properties Description Additional text that is shown below the label. It is only used if Wrap is true. [HtmlAttributeName(\"description\")] public string Description { get; set; } Property Value string Label When set, use this value for label instead of getting from the For property. When Wrap is false, the property is only used with checkbox and radio elements. For other input elements the value is ignored. [HtmlAttributeName(\"label\")] public string Label { get; set; } Property Value string Multiline This property has no effect on this tag helper. [HtmlAttributeNotBound] public bool Multiline { get; set; } Property Value bool NoLabel When true do not render a label element. [HtmlAttributeName(\"no-label\")] public bool NoLabel { get; set; } Property Value bool NoWidth When true do not set a width. [HtmlAttributeName(\"no-width\")] public bool NoWidth { get; set; } Property Value bool Theme Theme to use for styling. protected IUFTheme Theme { get; } Property Value IUFTheme Wrap When true, wrap input element in a div. With false just render the input element. [HtmlAttributeName(\"wrap\")] public bool Wrap { get; set; } Property Value bool Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag. Remarks Does nothing if For is null."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Forms Classes UFInputProperties UFInputTagHelper Renders either a text input, a checkbox or a radio button. If no id is set and Wrap is true the class will generate an id so the label can reference the input element. If there are no field errors, the field error block is not rendered. Renders text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <input class=\"{Theme.GetTextInputClasses(type)}\" id={} .../> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders text input without wrapping: <input class=\"{Theme.GetTextInputClasses(type) .../> Renders multiline text input with wrapping and label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <label class=\"{Theme.GetTextLabelClasses(type)}\" for=\"{id}\"> <span class=\"{Theme.GetTextLabelSpanClasses(type)}\">{label}</span> <span class=\"{Theme.GetTextLabelDescriptionClasses(type)}\">{description}</span> </label> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} {RenderFieldErrors(...)} </div> Renders multiline text input with wrapping and no label: <div class=\"{Theme.GetTextWrapperClasses(type)}\"> <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders multiline text input without wrapping: <textarea class=\"{Theme.GetTextInputClasses(type)}\" id={} ...\" >{value}</textarea> Renders radio input with wrapping and a label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <label class=\"{Theme.GetRadioLabelClasses()}\"> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input with wrapping but no label: <div class=\"{Theme.GetRadioWrapperClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders radio input without wrapping but with a label: <label class=\"{Theme.GetRadioLabelClasses()}\"> <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} <span class=\"{Theme.GetRadioLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetRadioLabelDescriptionClasses()}\">{description}</span> </label> Renders radio input without wrapping and without a label: <input type=\"radio\" class=\"{Theme.GetRadioInputClasses()}\" id={} .../> {Theme.GetRadioExtraHtml()} Renders checkbox input with wrapping and a label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input with wrapping but no label: <div class=\"{Theme.GetCheckboxWrapperClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders checkbox input without wrapping but with a label: <label class=\"{Theme.GetCheckboxLabelClasses()}\"> <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} ... /> {Theme.GetCheckboxExtraHtml()} <span class=\"{Theme.GetCheckboxLabelSpanClasses()}>{label}</span> <span class=\"{Theme.GetCheckboxLabelDescriptionClasses()}\">{description}</span> </label> Renders checkbox input without wrapping and without a label: <input type=\"checkbox\" class=\"{Theme.GetCheckboxInputClasses()}\" id={} .../> {Theme.GetCheckboxExtraHtml()} UFSelectTagHelper Base class to help with rendering a select element. If not id is set and Wrap is true, the code will generate an id so the label can reference the select element. If there are no field errors, the field error block is not rendered. Renders with wrapping: <div class=\"{Theme.GetInputWrapperClasses()}\"> <label class=\"{Theme.GetInputLabelClasses()}\" for=\"{id}\">{label}</label> <select class=\"{Theme.GetSelectClasses() id={} ...\" > {children} </select> {Theme.GetValidationFeedbackContainer(id)} <div class=\"{Theme.GetFieldErrorsClasses()}\">{Theme.GetFieldErrorsHtml()}</div> </div> Renders without wrapping: <select class=\"{Theme.GetSelectClasses()}\" > {children} </select> Interfaces IUFInputProperties"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.IUFFlexProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.IUFFlexProperties.html",
    "title": "Interface IUFFlexProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFFlexProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll public interface IUFFlexProperties Properties AlignContent How to distribute the items in the opposite direction. UFFlexAlignContent AlignContent { get; set; } Property Value UFFlexAlignContent AlignItems How to align the items in the opposite direction. UFFlexAlignItems AlignItems { get; set; } Property Value UFFlexAlignItems Buttons When true, the stack is used to contain buttons. bool Buttons { get; set; } Property Value bool FullHeight When true use all available vertical space in the parent. bool FullHeight { get; set; } Property Value bool FullWidth When true use all available horizontal space in the parent. bool FullWidth { get; set; } Property Value bool Gap Gap index, determining minimal space between children. When null, the theme default is used. int? Gap { get; set; } Property Value int? JustifyContent How to distribute the items in the direction of the stack. UFFlexJustifyContent JustifyContent { get; set; } Property Value UFFlexJustifyContent Wrap When true wrap children across multiple rows or columns when they don\"t fit. bool Wrap { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.IUFSpacerProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.IUFSpacerProperties.html",
    "title": "Interface IUFSpacerProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFSpacerProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll public interface IUFSpacerProperties Properties Size Space size. int Size { get; set; } Property Value int"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFColumnTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFColumnTagHelper.html",
    "title": "Class UFColumnTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFColumnTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> [HtmlTargetElement(\"uf-column\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFColumnTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFFlexProperties Inheritance object TagHelper UFTagHelperWithTheme UFColumnTagHelper Implements ITagHelper ITagHelperComponent IUFFlexProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFColumnTagHelper(IUFTheme) Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> public UFColumnTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Properties AlignContent How to distribute the items in the opposite direction. [HtmlAttributeName(\"align-content\")] public UFFlexAlignContent AlignContent { get; set; } Property Value UFFlexAlignContent AlignItems How to align the items in the opposite direction. [HtmlAttributeName(\"align-items\")] public UFFlexAlignItems AlignItems { get; set; } Property Value UFFlexAlignItems Buttons When true, the stack is used to contain buttons. [HtmlAttributeName(\"buttons\")] public bool Buttons { get; set; } Property Value bool FullHeight When true use all available vertical space in the parent. [HtmlAttributeName(\"full-height\")] public bool FullHeight { get; set; } Property Value bool FullWidth When true use all available horizontal space in the parent. [HtmlAttributeName(\"full-width\")] public bool FullWidth { get; set; } Property Value bool Gap Gap index, determining minimal space between children. When null, the theme default is used. [HtmlAttributeName(\"gap\")] public int? Gap { get; set; } Property Value int? JustifyContent How to distribute the items in the direction of the stack. [HtmlAttributeName(\"justify-content\")] public UFFlexJustifyContent JustifyContent { get; set; } Property Value UFFlexJustifyContent Wrap When true wrap children across multiple rows or columns when they don\"t fit. [HtmlAttributeName(\"wrap\")] public bool Wrap { get; set; } Property Value bool Methods GetColumnClasses() The default implementation calls GetColumnClasses(IUFFlexProperties). protected virtual string GetColumnClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFFlexProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFFlexProperties.html",
    "title": "Class UFFlexProperties | UltraForce.Library.Core.Asp",
    "keywords": "Class UFFlexProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll public class UFFlexProperties : IUFFlexProperties Inheritance object UFFlexProperties Implements IUFFlexProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AlignContent How to distribute the items in the opposite direction. public UFFlexAlignContent AlignContent { get; set; } Property Value UFFlexAlignContent AlignItems How to align the items in the opposite direction. public UFFlexAlignItems AlignItems { get; set; } Property Value UFFlexAlignItems Buttons When true, the stack is used to contain buttons. public bool Buttons { get; set; } Property Value bool FullHeight When true use all available vertical space in the parent. public bool FullHeight { get; set; } Property Value bool FullWidth When true use all available horizontal space in the parent. public bool FullWidth { get; set; } Property Value bool Gap Gap index, determining minimal space between children. When null, the theme default is used. public int? Gap { get; set; } Property Value int? JustifyContent How to distribute the items in the direction of the stack. public UFFlexJustifyContent JustifyContent { get; set; } Property Value UFFlexJustifyContent Wrap When true wrap children across multiple rows or columns when they don\"t fit. public bool Wrap { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFRowTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFRowTagHelper.html",
    "title": "Class UFRowTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFRowTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> [HtmlTargetElement(\"uf-row\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFRowTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFFlexProperties Inheritance object TagHelper UFTagHelperWithTheme UFRowTagHelper Implements ITagHelper ITagHelperComponent IUFFlexProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFRowTagHelper(IUFTheme) Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> public UFRowTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Properties AlignContent How to distribute the items in the opposite direction. [HtmlAttributeName(\"align-content\")] public UFFlexAlignContent AlignContent { get; set; } Property Value UFFlexAlignContent AlignItems How to align the items in the opposite direction. [HtmlAttributeName(\"align-items\")] public UFFlexAlignItems AlignItems { get; set; } Property Value UFFlexAlignItems Buttons When true, the stack is used to contain buttons. [HtmlAttributeName(\"buttons\")] public bool Buttons { get; set; } Property Value bool FullHeight When true use all available vertical space in the parent. [HtmlAttributeName(\"full-height\")] public bool FullHeight { get; set; } Property Value bool FullWidth When true use all available horizontal space in the parent. [HtmlAttributeName(\"full-width\")] public bool FullWidth { get; set; } Property Value bool Gap Gap index, determining minimal space between children. When null, the theme default is used. [HtmlAttributeName(\"gap\")] public int? Gap { get; set; } Property Value int? JustifyContent How to distribute the items in the direction of the stack. [HtmlAttributeName(\"justify-content\")] public UFFlexJustifyContent JustifyContent { get; set; } Property Value UFFlexJustifyContent Wrap When true wrap children across multiple rows or columns when they don\"t fit. [HtmlAttributeName(\"wrap\")] public bool Wrap { get; set; } Property Value bool Methods GetRowClasses() The default implementation calls GetRowClasses(IUFFlexProperties). protected virtual string GetRowClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFSpacerProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFSpacerProperties.html",
    "title": "Class UFSpacerProperties | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSpacerProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll public class UFSpacerProperties : IUFSpacerProperties Inheritance object UFSpacerProperties Implements IUFSpacerProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Size Space size. public int Size { get; set; } Property Value int"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFSpacerTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.UFSpacerTagHelper.html",
    "title": "Class UFSpacerTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFSpacerTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Assembly UltraForce.Library.Core.Asp.dll Adds a space between items in a UFColumnTagHelper. Renders: <div class=\"{GetCssClasses()}\" /> [HtmlTargetElement(\"uf-spacer\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFSpacerTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFSpacerProperties Inheritance object TagHelper UFTagHelperWithTheme UFSpacerTagHelper Implements ITagHelper ITagHelperComponent IUFSpacerProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFSpacerTagHelper(IUFTheme) Adds a space between items in a UFColumnTagHelper. Renders: <div class=\"{GetCssClasses()}\" /> public UFSpacerTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Properties Size Space size. [HtmlAttributeName(\"size\")] public int Size { get; set; } Property Value int Methods GetSpacerClasses() The default implementation calls GetSpacerClasses(IUFSpacerProperties). protected virtual string GetSpacerClasses() Returns string Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Layout Classes UFColumnTagHelper Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> UFFlexProperties UFRowTagHelper Stack items vertically or horizontally. Renders: <div class=\"{GetStackClasses()}\"> {children} </div> UFSpacerProperties UFSpacerTagHelper Adds a space between items in a UFColumnTagHelper. Renders: <div class=\"{GetCssClasses()}\" /> Interfaces IUFFlexProperties IUFSpacerProperties"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFCellProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFCellProperties.html",
    "title": "Interface IUFCellProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFCellProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll public interface IUFCellProperties Properties Filter When true data in the cell can be found via the filter. When false an attribute with the name \"data-no-filter\" is added to the cell tag. This property is only processed when Type is Data. bool Filter { get; set; } Property Value bool Horizontal Horizontal position of content within the cell UFContentPosition Horizontal { get; set; } Property Value UFContentPosition TextSize Size of text within the cell UFTableTextSize TextSize { get; set; } Property Value UFTableTextSize Vertical Vertical position of content within the cell UFContentPosition Vertical { get; set; } Property Value UFContentPosition Width When non empty, set this value as width value. This can either be a css class or a style definition. string Width { get; set; } Property Value string Wrap When true wrap content if cell is to small bool Wrap { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFTableProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFTableProperties.html",
    "title": "Interface IUFTableProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFTableProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll public interface IUFTableProperties Properties Filter When true add a data-filter attribute with the value \"1\" to the table. bool Filter { get; set; } Property Value bool PageSize Number of rows per page (only used if Paging is true). It will set data-page-size attribute on the table. int PageSize { get; set; } Property Value int Paging When true add a data-paging attribute with the value \"1\" to the table. bool Paging { get; set; } Property Value bool Sorting When true add data-sorting attribute with the value \"1\" to the table. bool Sorting { get; set; } Property Value bool"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFTableRowProperties.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.IUFTableRowProperties.html",
    "title": "Interface IUFTableRowProperties | UltraForce.Library.Core.Asp",
    "keywords": "Interface IUFTableRowProperties Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll public interface IUFTableRowProperties Properties Alternate When true show rows with alternating background colors bool Alternate { get; set; } Property Value bool Hover When true show different background on hover bool Hover { get; set; } Property Value bool SortLocation Keep the row at top or bottom if table gets sorted Setting this value to Top or Bottom will create a `data-sort-location` attribute with either \"top\" or \"bottom\" as value. UFTableSortLocation SortLocation { get; set; } Property Value UFTableSortLocation Type The type of row UFTableRowType Type { get; set; } Property Value UFTableRowType"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFCellTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFCellTagHelper.html",
    "title": "Class UFCellTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFCellTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll Creates a table cell using custom styling. The cell can be self-closing or can contain content with a separate closing tag. The generated td or th element always uses a opening and closing tag. Rendered html for header: <th class=\"{GetCssClasses()}}\">{children}</th> Rendered html for data: <td class=\"{GetCssClasses()}}\">{children}</td> Rendered html for buttons (a div is used so that flex or grid styling can be used): <td class=\"{GetCssClasses()}}\"> <div class=\"{GetButtonsCssClasses()} > {children} </div> </td> [HtmlTargetElement(\"uf-cell\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFCellTagHelper : UFTagHelperWithModelExpressionRenderer, ITagHelper, ITagHelperComponent, IUFCellProperties Inheritance object TagHelper UFTagHelperWithTheme UFTagHelperWithViewContext UFTagHelperWithModelExpressionRenderer UFCellTagHelper Implements ITagHelper ITagHelperComponent IUFCellProperties Inherited Members UFTagHelperWithModelExpressionRenderer.ModelExpressionRenderer UFTagHelperWithViewContext.ViewContext UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFCellTagHelper(IUFModelExpressionRenderer, IUFTheme) Creates a table cell using custom styling. The cell can be self-closing or can contain content with a separate closing tag. The generated td or th element always uses a opening and closing tag. Rendered html for header: <th class=\"{GetCssClasses()}}\">{children}</th> Rendered html for data: <td class=\"{GetCssClasses()}}\">{children}</td> Rendered html for buttons (a div is used so that flex or grid styling can be used): <td class=\"{GetCssClasses()}}\"> <div class=\"{GetButtonsCssClasses()} > {children} </div> </td> public UFCellTagHelper(IUFModelExpressionRenderer aModelExpressionRenderer, IUFTheme aTheme) Parameters aModelExpressionRenderer IUFModelExpressionRenderer aTheme IUFTheme Properties Filter When true data in the cell can be found via the filter. When false an attribute with the name \"data-no-filter\" is added to the cell tag. This property is only processed when Type is Data. [HtmlAttributeName(\"filter\")] public bool Filter { get; set; } Property Value bool For An expression to be evaluated against the current model. When set, the method will use the type to adjust the sort type (if SortType is set to Auto). Date values are formatted using mysql format (so there is no confusion on month and day positions): \"yyyy-mm-dd hh:mm:ss\" If the type of this value is a `bool`, an attribute `data-sort-value` is set with either `0` or `1`. For data cells, the value is used as content for the cell. For header cells, the name is used as content for the cell. [HtmlAttributeName(\"for\")] public ModelExpression? For { get; set; } Property Value ModelExpression Horizontal Horizontal position of content within the cell [HtmlAttributeName(\"horizontal\")] public UFContentPosition Horizontal { get; set; } Property Value UFContentPosition SortType Type of sorting (only of use with Header). If type is set to Auto (default) the method will try to determine the type from For. An attribute with the name \"data-sort-type\" will be added to the cell. This attribute contains one of the following values: - \"text\" - \"number\" - \"date\" [HtmlAttributeName(\"sort-type\")] public UFTableSortType SortType { get; set; } Property Value UFTableSortType TextSize Size of text within the cell [HtmlAttributeName(\"text-size\")] public UFTableTextSize TextSize { get; set; } Property Value UFTableTextSize Type Type of cell. [HtmlAttributeName(\"type\")] public UFTableCellType Type { get; set; } Property Value UFTableCellType Vertical Vertical position of content within the cell [HtmlAttributeName(\"vertical\")] public UFContentPosition Vertical { get; set; } Property Value UFContentPosition Width When non empty, set this value as width value. This can either be a css class or a style definition. The method IsCssClass(string) is used to determine which. [HtmlAttributeName(\"width\")] public string Width { get; set; } Property Value string Wrap When true wrap content if cell is to small [HtmlAttributeName(\"wrap\")] public bool Wrap { get; set; } Property Value bool Methods ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. public override Task ProcessAsync(TagHelperContext aContext, TagHelperOutput anOutput) Parameters aContext TagHelperContext anOutput TagHelperOutput Returns Task A Task that on completion updates the output. Remarks By default this calls into Process(TagHelperContext, TagHelperOutput)."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFTableRowTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFTableRowTagHelper.html",
    "title": "Class UFTableRowTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTableRowTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll Creates a table row. [HtmlTargetElement(\"uf-table-row\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFTableRowTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFTableRowProperties Inheritance object TagHelper UFTagHelperWithTheme UFTableRowTagHelper Implements ITagHelper ITagHelperComponent IUFTableRowProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTableRowTagHelper(IUFTheme) Creates a table row. public UFTableRowTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Fields Row The key that children can use to access this instance. public const string Row = \"uf_row\" Field Value string Properties Alternate When true show rows with alternating background colors [HtmlAttributeName(\"alternate\")] public bool Alternate { get; set; } Property Value bool Hover When true show different background on hover [HtmlAttributeName(\"hover\")] public bool Hover { get; set; } Property Value bool SortLocation Keep the row at top or bottom if table gets sorted Setting this value to Top or Bottom will create a `data-sort-location` attribute with either \"top\" or \"bottom\" as value. [HtmlAttributeName(\"sort-location\")] public UFTableSortLocation SortLocation { get; set; } Property Value UFTableSortLocation Type The type of row [HtmlAttributeName(\"type\")] public UFTableRowType Type { get; set; } Property Value UFTableRowType Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput anOutput) Parameters context TagHelperContext Contains information associated with the current HTML tag. anOutput TagHelperOutput"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFTableTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.UFTableTagHelper.html",
    "title": "Class UFTableTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTableTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Assembly UltraForce.Library.Core.Asp.dll Simple tag helper to render a table. [HtmlTargetElement(\"uf-table\", TagStructure = TagStructure.NormalOrSelfClosing)] public class UFTableTagHelper : UFTagHelperWithTheme, ITagHelper, ITagHelperComponent, IUFTableProperties Inheritance object TagHelper UFTagHelperWithTheme UFTableTagHelper Implements ITagHelper ITagHelperComponent IUFTableProperties Inherited Members UFTagHelperWithTheme.Theme TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFTableTagHelper(IUFTheme) Simple tag helper to render a table. public UFTableTagHelper(IUFTheme aTheme) Parameters aTheme IUFTheme Fields Table The key that children can use to access this instance. public const string Table = \"uf_table\" Field Value string Properties Filter When true add a data-filter attribute with the value \"1\" to the table. [HtmlAttributeName(\"filter\")] public bool Filter { get; set; } Property Value bool PageSize Number of rows per page (only used if Paging is true). It will set data-page-size attribute on the table. [HtmlAttributeName(\"page-size\")] public int PageSize { get; set; } Property Value int Paging When true add a data-paging attribute with the value \"1\" to the table. [HtmlAttributeName(\"paging\")] public bool Paging { get; set; } Property Value bool Sorting When true add data-sorting attribute with the value \"1\" to the table. [HtmlAttributeName(\"sorting\")] public bool Sorting { get; set; } Property Value bool StorageId Assign a value to preserve the sorting and paging state of the table between sessions. When set the state is stored in a local storage of the browser. public string StorageId { get; set; } Property Value string Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag."
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.Styling.Table.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers.Styling.Table Classes UFCellTagHelper Creates a table cell using custom styling. The cell can be self-closing or can contain content with a separate closing tag. The generated td or th element always uses a opening and closing tag. Rendered html for header: <th class=\"{GetCssClasses()}}\">{children}</th> Rendered html for data: <td class=\"{GetCssClasses()}}\">{children}</td> Rendered html for buttons (a div is used so that flex or grid styling can be used): <td class=\"{GetCssClasses()}}\"> <div class=\"{GetButtonsCssClasses()} > {children} </div> </td> UFTableRowTagHelper Creates a table row. UFTableTagHelper Simple tag helper to render a table. Interfaces IUFCellProperties IUFTableProperties IUFTableRowProperties"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.UFConditionTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.UFConditionTagHelper.html",
    "title": "Class UFConditionTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFConditionTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers Assembly UltraForce.Library.Core.Asp.dll This tag helper adds support for condition attribute. When specified the tag and its children are only processed if the value is true. [HtmlTargetElement(Attributes = \"uf-condition\")] public class UFConditionTagHelper : TagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFConditionTagHelper Implements ITagHelper ITagHelperComponent Inherited Members TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Based on the example code of: https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring Properties Condition Condition that will be set via the attribute [HtmlAttributeName(\"uf-condition\")] public bool Condition { get; set; } Property Value bool Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext aContext, TagHelperOutput anOutput) Parameters aContext TagHelperContext anOutput TagHelperOutput"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.UFNotConditionTagHelper.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.UFNotConditionTagHelper.html",
    "title": "Class UFNotConditionTagHelper | UltraForce.Library.Core.Asp",
    "keywords": "Class UFNotConditionTagHelper Namespace UltraForce.Library.Core.Asp.TagHelpers Assembly UltraForce.Library.Core.Asp.dll This tag helper adds support for not-condition attribute. When specified the tag and its children are only processed if the value is false. This tag has the opposite effect of UFConditionTagHelper. [HtmlTargetElement(Attributes = \"uf-not-condition\")] public class UFNotConditionTagHelper : TagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper UFNotConditionTagHelper Implements ITagHelper ITagHelperComponent Inherited Members TagHelper.Init(TagHelperContext) TagHelper.ProcessAsync(TagHelperContext, TagHelperOutput) TagHelper.Order object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Based on the example code of: https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring Properties NotCondition Condition that will be set via the attribute [HtmlAttributeName(\"uf-not-condition\")] public bool NotCondition { get; set; } Property Value bool Methods Process(TagHelperContext, TagHelperOutput) Synchronously executes the TagHelper with the given context and output. public override void Process(TagHelperContext aContext, TagHelperOutput anOutput) Parameters aContext TagHelperContext anOutput TagHelperOutput"
  },
  "api/UltraForce.Library.Core.Asp.TagHelpers.html": {
    "href": "api/UltraForce.Library.Core.Asp.TagHelpers.html",
    "title": "Namespace UltraForce.Library.Core.Asp.TagHelpers | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.TagHelpers Classes UFConditionTagHelper This tag helper adds support for condition attribute. When specified the tag and its children are only processed if the value is true. UFNotConditionTagHelper This tag helper adds support for not-condition attribute. When specified the tag and its children are only processed if the value is false. This tag has the opposite effect of UFConditionTagHelper."
  },
  "api/UltraForce.Library.Core.Asp.Tools.UFCoreHtmlTools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.UFCoreHtmlTools.html",
    "title": "Class UFCoreHtmlTools | UltraForce.Library.Core.Asp",
    "keywords": "Class UFCoreHtmlTools Namespace UltraForce.Library.Core.Asp.Tools Assembly UltraForce.Library.Core.Asp.dll Html support methods. public static class UFCoreHtmlTools Inheritance object UFCoreHtmlTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RemoveDomain(HttpRequest, string) Removes all domain references from a html string. public static string RemoveDomain(HttpRequest aRequest, string anHtml) Parameters aRequest HttpRequest Request to get current domain from anHtml string Returns string"
  },
  "api/UltraForce.Library.Core.Asp.Tools.UFCoreStringTools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.UFCoreStringTools.html",
    "title": "Class UFCoreStringTools | UltraForce.Library.Core.Asp",
    "keywords": "Class UFCoreStringTools Namespace UltraForce.Library.Core.Asp.Tools Assembly UltraForce.Library.Core.Asp.dll An utility class that adds extra string related methods. public static class UFCoreStringTools Inheritance object UFCoreStringTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetString(IHtmlContent) Gets the html content as string. public static string GetString(IHtmlContent aContent) Parameters aContent IHtmlContent Content to convert to string Returns string Content as string Utf8ToAscii(string) Converts an utf8 string to ascii string. Characters that can not be converted are removed. public static string Utf8ToAscii(string aText) Parameters aText string Text using UTF8 encoding Returns string Text using ascii encoding"
  },
  "api/UltraForce.Library.Core.Asp.Tools.UFModelExpressionTools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.UFModelExpressionTools.html",
    "title": "Class UFModelExpressionTools | UltraForce.Library.Core.Asp",
    "keywords": "Class UFModelExpressionTools Namespace UltraForce.Library.Core.Asp.Tools Assembly UltraForce.Library.Core.Asp.dll public static class UFModelExpressionTools Inheritance object UFModelExpressionTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsGenericIEnumerable(ModelExpression) Checks if a model expression represents a generic IEnumerable. public static bool IsGenericIEnumerable(ModelExpression aModelExpression) Parameters aModelExpression ModelExpression Returns bool IsIEnumerable(ModelExpression) Checks if a model expression represents an IEnumerable. public static bool IsIEnumerable(ModelExpression aModelExpression) Parameters aModelExpression ModelExpression Returns bool"
  },
  "api/UltraForce.Library.Core.Asp.Tools.UFMvcTools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.UFMvcTools.html",
    "title": "Class UFMvcTools | UltraForce.Library.Core.Asp",
    "keywords": "Class UFMvcTools Namespace UltraForce.Library.Core.Asp.Tools Assembly UltraForce.Library.Core.Asp.dll UFMvcTools contain static support methods for MVC. public static class UFMvcTools Inheritance object UFMvcTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddFirstItem(SelectList, SelectListItem) Adds an item at the start of a select list. Preserves the selected state. public static SelectList AddFirstItem(SelectList aList, SelectListItem anItem) Parameters aList SelectList List to add item to anItem SelectListItem Item to insert at first position Returns SelectList New list with item inserted CreateListFromEnum<T>(string?) Creates a SelectList from an enum type. public static SelectList CreateListFromEnum<T>(string? anEmptyChoice = null) where T : struct, Enum Parameters anEmptyChoice string Returns SelectList Select list Type Parameters T Enum type GetControllerName(string) Checks if the name ends with 'Controller', if it does remove it. public static string GetControllerName(string aController) Parameters aController string Name of controller Returns string Name of controller without 'Controller' at the end GetControllerName<T>() Checks if the type name ends with 'Controller', if it does remove it. public static string GetControllerName<T>() Returns string Name of type without 'Controller' at the end Type Parameters T GetErrors(ModelStateDictionary, string, string, string, string) Gets the errors for a field as a single string public static string GetErrors(ModelStateDictionary aModelState, string aName, string aDivider = \", \", string anHead = \"\", string aTail = \"\") Parameters aModelState ModelStateDictionary Model state to get errors from aName string Field name to get errors for aDivider string Value to place between errors anHead string Value at start, only used if there are errors aTail string Value at end, only used if there are errors Returns string A string containing all errors or Empty if there are no errors or no field with the specified name can be found GetJsonName(object, string) Gets the json name for a property in an object. The method checks if a property has a JsonPropertyNameAttribute and if so returns the name from the attribute. If no attribute can be found the property name is returned. public static string GetJsonName(object anObject, string aPropertyName) Parameters anObject object Object to get property from aPropertyName string Name of property Returns string Json name or value of aProperty Exceptions Exception When no property can be found for the specified name GetViewComponentName(string) Checks if the name ends with 'ViewComponent', if it does remove it. public static string GetViewComponentName(string aComponent) Parameters aComponent string Name of component Returns string Name of controller without 'ViewComponent' at the end Normalize(string) Returns a normalized value of a string. public static string Normalize(string aValue) Parameters aValue string Value to normalize Returns string Normalized value ReplaceMacros(string, IPrincipal?) Replace macro texts with values. The method replaces the following macro's: {copy}, {year} and {user} public static string ReplaceMacros(string aText, IPrincipal? aPrincipal = null) Parameters aText string text that might contain macro's aPrincipal IPrincipal value to get user name from Returns string aText with macro's replaced Validate(object) Validates an object using their validation attributes. public static (bool isValid, ICollection<ValidationResult> results) Validate(object anObject) Parameters anObject object Returns (bool isValid, ICollection<ValidationResult> results)"
  },
  "api/UltraForce.Library.Core.Asp.Tools.UFTagHelperTools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.UFTagHelperTools.html",
    "title": "Class UFTagHelperTools | UltraForce.Library.Core.Asp",
    "keywords": "Class UFTagHelperTools Namespace UltraForce.Library.Core.Asp.Tools Assembly UltraForce.Library.Core.Asp.dll Support methods for TagHelper public static class UFTagHelperTools Inheritance object UFTagHelperTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAttribute(TagHelperAttributeList, string, string, string) Adds a value for an attribute. If the attribute exists, the aValue gets inserted before the attributes original value. public static void AddAttribute(TagHelperAttributeList anAttributes, string anAttribute, string aValue, string aSeparator = \" \") Parameters anAttributes TagHelperAttributeList anAttribute string aValue string aSeparator string AddClasses(TagHelperOutput, string) Shortcut to add css classes to an output. The method calls AddAttribute(TagHelperAttributeList, string, string, string) with the correct parameters. public static void AddClasses(TagHelperOutput anOutput, string aClasses) Parameters anOutput TagHelperOutput Output to get attributes from aClasses string Additional css classes to add CreateAttributeList(Dictionary<string, string>) Builds a tag helper attribute list from a dictionary. public static TagHelperAttributeList CreateAttributeList(Dictionary<string, string> anAttributes) Parameters anAttributes Dictionary<string, string> Returns TagHelperAttributeList FindAttribute(TagHelperAttributeList, string) Tries to find an attribute with a certain name. public static TagHelperAttribute? FindAttribute(TagHelperAttributeList aList, string aName) Parameters aList TagHelperAttributeList aName string Returns TagHelperAttribute GetLabel(IHtmlGenerator, ViewContext, ModelExpression?, string) Gets the label from a model expression, by building label with IHtmlGenerator and getting its inner html contents. public static string GetLabel(IHtmlGenerator aGenerator, ViewContext aViewContext, ModelExpression? anExpression, string aLabelText) Parameters aGenerator IHtmlGenerator Generator to use aViewContext ViewContext View context to render in anExpression ModelExpression Expression to get label from aLabelText string When non null, use this value instead of getting the label Returns string the inner html or aLabelText if it was not empty RenderTagHelperOutput(TagHelperOutput, HtmlEncoder?) Renders the output of a tag helper to a string. See: https://github.com/MissaouiChedy/RenderingTagHelperInsideAnother/blob/master/src/RenderingTagHelperInsideAnother/TagHelpers/WrapperTagHelper.cs public static string RenderTagHelperOutput(TagHelperOutput anOutput, HtmlEncoder? anEncoder = null) Parameters anOutput TagHelperOutput anEncoder HtmlEncoder Returns string RenderTagHelper<T>(TagHelperAttributeList, TagHelperContent?) Renders a tag helper to a string. See: https://github.com/MissaouiChedy/RenderingTagHelperInsideAnother/blob/master/src/RenderingTagHelperInsideAnother/TagHelpers/WrapperTagHelper.cs public static string RenderTagHelper<T>(TagHelperAttributeList anAttributeList, TagHelperContent? aContent = null) where T : TagHelper, new() Parameters anAttributeList TagHelperAttributeList aContent TagHelperContent Optional child content for the tag helper Returns string Type Parameters T RenderTagHelper<T>(TagHelperContent?) Renders a tag helper that does not use any attributes to a string. public static string RenderTagHelper<T>(TagHelperContent? aContent = null) where T : TagHelper, new() Parameters aContent TagHelperContent Optional child content for the tag helper Returns string Type Parameters T RenderTagHelper<T>(Dictionary<string, string>, TagHelperContent?) Renders a tag helper to a string. public static string RenderTagHelper<T>(Dictionary<string, string> anAttributes, TagHelperContent? aContent = null) where T : TagHelper, new() Parameters anAttributes Dictionary<string, string> aContent TagHelperContent Optional child content for the tag helper Returns string Type Parameters T RenderTagHelper<T>(Dictionary<string, string>, string) Renders a tag helper that does not use any attributes to a string. public static string RenderTagHelper<T>(Dictionary<string, string> anAttributeList, string aContent) where T : TagHelper, new() Parameters anAttributeList Dictionary<string, string> aContent string Optional child content for the tag helper Returns string Type Parameters T RenderTagHelper<T>(string) Renders a tag helper that does not use any attributes to a string. public static string RenderTagHelper<T>(string aContent) where T : TagHelper, new() Parameters aContent string Child content for the tag helper Returns string Type Parameters T SetContentToHtmlAsync(TagHelperOutput, string) Sets the content to a specific html. The html is only set if there is not another tag helper and the content is empty. public static Task SetContentToHtmlAsync(TagHelperOutput anOutput, string anHtml) Parameters anOutput TagHelperOutput Output to update anHtml string Html to set Returns Task SetContentToTagBuilderAsync(TagHelperOutput, Func<TagBuilder>) Sets the content to the inner html of a tag. The content is only set if there is no current content and no other tag helper as adjusted the content already. public static Task SetContentToTagBuilderAsync(TagHelperOutput anOutput, Func<TagBuilder> aFactory) Parameters anOutput TagHelperOutput Output to update content of aFactory Func<TagBuilder> Factory that generates a tag to get inner content of Returns Task SetContentToText(TagHelperOutput, string) Sets the content to a specific text. The text is only set if there is not another tag helper and the content is empty. public static Task SetContentToText(TagHelperOutput anOutput, string aText) Parameters anOutput TagHelperOutput Output to update aText string Text to set Returns Task"
  },
  "api/UltraForce.Library.Core.Asp.Tools.html": {
    "href": "api/UltraForce.Library.Core.Asp.Tools.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Tools | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Tools Classes UFCoreHtmlTools Html support methods. UFCoreStringTools An utility class that adds extra string related methods. UFModelExpressionTools UFMvcTools UFMvcTools contain static support methods for MVC. UFTagHelperTools Support methods for TagHelper"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonColor.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonColor.html",
    "title": "Enum UFButtonColor | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFButtonColor Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Colors for the button public enum UFButtonColor Fields Danger = 2 Disabled = 4 Normal = 0 Success = 1 Warning = 3"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonIconPosition.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonIconPosition.html",
    "title": "Enum UFButtonIconPosition | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFButtonIconPosition Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Position of the icon in the button. public enum UFButtonIconPosition Fields Bottom = 3 End = 1 Start = 0 Top = 2"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonSize.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonSize.html",
    "title": "Enum UFButtonSize | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFButtonSize Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Size of button and caption public enum UFButtonSize Fields Large = 2 Normal = 0 Small = 1"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonStyle.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonStyle.html",
    "title": "Enum UFButtonStyle | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFButtonStyle Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Styles that might set multiple properties to a predefined value. public enum UFButtonStyle Fields Add = 11 Sets the icon to a visual representing adding (plus) Back = 3 Sets the icon to a visual representing going back (left arrow) and use outline variant. Copy = 9 Sets the icon to a visual representing copying something (copy) Create = 4 Sets the icon to a visual representing creating something (new file) Custom = 0 Do not set any property. Delete = 7 Sets the icon to a visual representing deleting something (trash) Details = 6 Sets the icon to a visual representing showing details (info) Edit = 5 Sets the icon to a visual representing editing something (pencil) List = 8 Sets the icon to a visual representing a list (list) Remove = 12 Sets the icon to a visual representing adding (minus) Save = 2 Set the icon to a visual representing saving something (floppy disk) Send = 1 Sets the icon to a visual representing sending something (envelope) Users = 10 Sets the icon to a visual representing a group of users (copy)"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonVariant.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFButtonVariant.html",
    "title": "Enum UFButtonVariant | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFButtonVariant Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll What style to draw the button in public enum UFButtonVariant Fields Link = 2 Draw the button with a link style. Normal = 0 Normal filled button Outline = 1 Reverse the colors and draw the button with an outline."
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFContentPosition.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFContentPosition.html",
    "title": "Enum UFContentPosition | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFContentPosition Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll public enum UFContentPosition Fields Center = 1 End = 2 Start = 0"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFDataAttribute.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFDataAttribute.html",
    "title": "Class UFDataAttribute | UltraForce.Library.Core.Asp",
    "keywords": "Class UFDataAttribute Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll public static class UFDataAttribute Inheritance object UFDataAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClearInput Used by UFTableTagHelper. public const string ClearInput = \"data-uf-clear-input\" Field Value string DisplayValue public const string DisplayValue = \"data-uf-display-value\" Field Value string FieldValue public const string FieldValue = \"data-uf-field-value\" Field Value string Filter Used by UFTableTagHelper. public const string Filter = \"data-uf-filter\" Field Value string FilterTable Used by UFTableTagHelper. public const string FilterTable = \"data-uf-filter-table\" Field Value string HeaderRow Used by UFTableRowTagHelper. public const string HeaderRow = \"data-uf-header-row\" Field Value string HideIfField public const string HideIfField = \"data-uf-show-if-field\" Field Value string ImageHeight public const string ImageHeight = \"data-uf-image-height\" Field Value string ImageName public const string ImageName = \"data-uf-image-name\" Field Value string ImagePreview public const string ImagePreview = \"data-uf-image-preview\" Field Value string ImageSize public const string ImageSize = \"data-uf-image-size\" Field Value string ImageType public const string ImageType = \"data-uf-image-type\" Field Value string ImageWidth public const string ImageWidth = \"data-uf-image-width\" Field Value string NoFilter Used by UFCellTagHelper. public const string NoFilter = \"data-uf-no-filter\" Field Value string PageSize Used by UFTableTagHelper. public const string PageSize = \"data-uf-page-size\" Field Value string Paging Used by UFTableTagHelper. public const string Paging = \"data-uf-paging\" Field Value string ShowIfField public const string ShowIfField = \"data-uf-show-if-field\" Field Value string SortAscending Used by UFTableTagHelper. public const string SortAscending = \"data-uf-sort-ascending\" Field Value string SortDescending Used by UFTableTagHelper. public const string SortDescending = \"data-uf-sort-descending\" Field Value string SortLocation Used by UFTableRowTagHelper. public const string SortLocation = \"data-uf-sort-location\" Field Value string SortType Used by UFCellTagHelper. public const string SortType = \"data-uf-sort-type\" Field Value string SortValue Used by UFCellTagHelper. public const string SortValue = \"data-uf-sort-value\" Field Value string Sorting Used by UFTableTagHelper. public const string Sorting = \"data-uf-sorting\" Field Value string StorageId Used by various classes. public const string StorageId = \"data-uf-storage-id\" Field Value string"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexAlignContent.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexAlignContent.html",
    "title": "Enum UFFlexAlignContent | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFFlexAlignContent Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll How to distribute the children in the opposite direction of the main axis (column or row). public enum UFFlexAlignContent Fields Center = 1 End = 2 SpaceAround = 5 SpaceBetween = 4 SpaceEvenly = 6 Start = 0 Stretch = 3"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexAlignItems.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexAlignItems.html",
    "title": "Enum UFFlexAlignItems | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFFlexAlignItems Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll How to align the children in the opposite direction of the main axis (column or row). public enum UFFlexAlignItems Fields Base = 4 Center = 1 End = 2 Start = 0 Stretch = 3"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexJustifyContent.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFFlexJustifyContent.html",
    "title": "Enum UFFlexJustifyContent | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFFlexJustifyContent Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll How to distribute the children in the direction of the main axis (column or row). public enum UFFlexJustifyContent Fields Center = 2 End = 1 SpaceAround = 4 SpaceBetween = 3 SpaceEvenly = 5 Start = 0"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableCellType.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableCellType.html",
    "title": "Enum UFTableCellType | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFTableCellType Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll The type of cell generated. public enum UFTableCellType Fields Auto = 0 Determine the type of cell automatically. If the cell is in the header row it will be a Header cell, else it will be a Data cell. Data = 1 Cell is a data cell Header = 2 Cell is a header cell"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableRowType.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableRowType.html",
    "title": "Enum UFTableRowType | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFTableRowType Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll The row types for a row public enum UFTableRowType Fields Data = 1 Row is a data row Header = 0 Row is a header row"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableSortLocation.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableSortLocation.html",
    "title": "Enum UFTableSortLocation | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFTableSortLocation Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Position of row when sorting a table. public enum UFTableSortLocation Fields Bottom = 2 Keep row at bottom while sorting Middle = 0 Place row at a sorted location somewhere in the middle Top = 1 Keep row at top while sorting"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableSortType.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableSortType.html",
    "title": "Enum UFTableSortType | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFTableSortType Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll Determines how a column is sorted in a table. public enum UFTableSortType Fields Auto = 0 Determine type from For (if any), else defaults to text Date = 3 Sort values as dates None = 4 No sorting Number = 2 Sort values as number Text = 1 Sort values as text"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableTextSize.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.UFTableTextSize.html",
    "title": "Enum UFTableTextSize | UltraForce.Library.Core.Asp",
    "keywords": "Enum UFTableTextSize Namespace UltraForce.Library.Core.Asp.Types.Enums Assembly UltraForce.Library.Core.Asp.dll The size of the text in a table cell public enum UFTableTextSize Fields Normal = 0 Normal size Small = 1 Smaller size"
  },
  "api/UltraForce.Library.Core.Asp.Types.Enums.html": {
    "href": "api/UltraForce.Library.Core.Asp.Types.Enums.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Types.Enums | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Types.Enums Classes UFDataAttribute Enums UFButtonColor Colors for the button UFButtonIconPosition Position of the icon in the button. UFButtonSize Size of button and caption UFButtonStyle Styles that might set multiple properties to a predefined value. UFButtonVariant What style to draw the button in UFContentPosition UFFlexAlignContent How to distribute the children in the opposite direction of the main axis (column or row). UFFlexAlignItems How to align the children in the opposite direction of the main axis (column or row). UFFlexJustifyContent How to distribute the children in the direction of the main axis (column or row). UFTableCellType The type of cell generated. UFTableRowType The row types for a row UFTableSortLocation Position of row when sorting a table. UFTableSortType Determines how a column is sorted in a table. UFTableTextSize The size of the text in a table cell"
  },
  "api/UltraForce.Library.Core.Asp.ViewModels.UFEditViewModel-1.html": {
    "href": "api/UltraForce.Library.Core.Asp.ViewModels.UFEditViewModel-1.html",
    "title": "Class UFEditViewModel<T> | UltraForce.Library.Core.Asp",
    "keywords": "Class UFEditViewModel<T> Namespace UltraForce.Library.Core.Asp.ViewModels Assembly UltraForce.Library.Core.Asp.dll A base class for edit forms. public abstract class UFEditViewModel<T> where T : class, new() Type Parameters T Type being edited, should be a class and support a constructor without parameters. Inheritance object UFEditViewModel<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UFEditViewModel() Constructs an instance with a new value. protected UFEditViewModel() UFEditViewModel(T) Constructs an instance with an existing value. protected UFEditViewModel(T aValue) Parameters aValue T Properties NewValue True when editing a new value or false when editing an existing value public bool NewValue { get; set; } Property Value bool Value Value being edited public T Value { get; } Property Value T Methods Patch(T) Patches an existing value with data stored in Value. Subclasses must implement this method. public abstract T Patch(T aValue) Parameters aValue T Value to patch Returns T Value of aValue, so call can be chained if needed"
  },
  "api/UltraForce.Library.Core.Asp.ViewModels.html": {
    "href": "api/UltraForce.Library.Core.Asp.ViewModels.html",
    "title": "Namespace UltraForce.Library.Core.Asp.ViewModels | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.ViewModels Classes UFEditViewModel<T> A base class for edit forms."
  },
  "api/UltraForce.Library.Core.Asp.Web.UFWebExtensions.html": {
    "href": "api/UltraForce.Library.Core.Asp.Web.UFWebExtensions.html",
    "title": "Class UFWebExtensions | UltraForce.Library.Core.Asp",
    "keywords": "Class UFWebExtensions Namespace UltraForce.Library.Core.Asp.Web Assembly UltraForce.Library.Core.Asp.dll Defines various extensions methods public static class UFWebExtensions Inheritance object UFWebExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsInRole(ClaimsPrincipal, IEnumerable<string>) Adds an additional IsInRole method to test if user belongs to any of the specified roles. public static bool IsInRole(this ClaimsPrincipal aClaim, IEnumerable<string> aRoles) Parameters aClaim ClaimsPrincipal Claim to check aRoles IEnumerable<string> Roles to check Returns bool True if claim is at least in one role. IsInRole(ClaimsPrincipal, params string[]) Adds an additional IsInRole method to test if user belongs to any of the specified roles. public static bool IsInRole(this ClaimsPrincipal aClaim, params string[] aRoles) Parameters aClaim ClaimsPrincipal Claim to check aRoles string[] Roles to check Returns bool True if claim is at least in one role."
  },
  "api/UltraForce.Library.Core.Asp.Web.html": {
    "href": "api/UltraForce.Library.Core.Asp.Web.html",
    "title": "Namespace UltraForce.Library.Core.Asp.Web | UltraForce.Library.Core.Asp",
    "keywords": "Namespace UltraForce.Library.Core.Asp.Web Classes UFWebExtensions Defines various extensions methods"
  },
  "index.html": {
    "href": "index.html",
    "title": "| UltraForce.Library.Core.Asp",
    "keywords": ""
  }
}